
HW2-Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b4  080077b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077bc  080077bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080077c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  20000074  08007838  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b84  08007838  00024b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bc8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330e  00000000  00000000  00039c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004041  00000000  00000000  0003f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001654f  00000000  00000000  00043779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099688  00000000  00000000  00059cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006220  00000000  00000000  000f33a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f95c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f95e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007500 	.word	0x08007500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007500 	.word	0x08007500

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fdfa 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f884 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8f4 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f8c8 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f002 fc04 	bl	8002da4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  enc_data.lock = xSemaphoreCreateMutex();
 800059c:	2001      	movs	r0, #1
 800059e:	f002 ff38 	bl	8003412 <xQueueCreateMutex>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <main+0xc4>)
 80005a6:	6093      	str	r3, [r2, #8]
  rising_edge.lock = xSemaphoreCreateMutex();
 80005a8:	2001      	movs	r0, #1
 80005aa:	f002 ff32 	bl	8003412 <xQueueCreateMutex>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <main+0xc8>)
 80005b2:	6053      	str	r3, [r2, #4]
  round_time.lock = xSemaphoreCreateMutex();
 80005b4:	2001      	movs	r0, #1
 80005b6:	f002 ff2c 	bl	8003412 <xQueueCreateMutex>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a24      	ldr	r2, [pc, #144]	; (8000650 <main+0xcc>)
 80005be:	6053      	str	r3, [r2, #4]

  /*Creazione dei mutex per il calcolo dello slack time*/
  slack_rt1.lock = xSemaphoreCreateMutex();
 80005c0:	2001      	movs	r0, #1
 80005c2:	f002 ff26 	bl	8003412 <xQueueCreateMutex>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <main+0xd0>)
 80005ca:	6053      	str	r3, [r2, #4]
  slack_rt2.lock = xSemaphoreCreateMutex();
 80005cc:	2001      	movs	r0, #1
 80005ce:	f002 ff20 	bl	8003412 <xQueueCreateMutex>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <main+0xd4>)
 80005d6:	6053      	str	r3, [r2, #4]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  if (enc_data.lock != NULL &&  rising_edge.lock != NULL && round_time.lock != NULL)
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <main+0xc4>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d02f      	beq.n	8000640 <main+0xbc>
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <main+0xc8>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d02b      	beq.n	8000640 <main+0xbc>
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <main+0xcc>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d027      	beq.n	8000640 <main+0xbc>
  {
	  /* creation of encoder */
	  encoderHandle = osThreadNew(startEncoder, NULL, &encoder_attributes);
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <main+0xd8>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <main+0xdc>)
 80005f6:	f002 fc1f 	bl	8002e38 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <main+0xe0>)
 80005fe:	6013      	str	r3, [r2, #0]

	  /* creation of rt1 */
	  rt1Handle = osThreadNew(StartRt1, NULL, &rt1_attributes);
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <main+0xe4>)
 8000602:	2100      	movs	r1, #0
 8000604:	4819      	ldr	r0, [pc, #100]	; (800066c <main+0xe8>)
 8000606:	f002 fc17 	bl	8002e38 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <main+0xec>)
 800060e:	6013      	str	r3, [r2, #0]

	  /* creation of rt2 */
	  rt2Handle = osThreadNew(StartRt2, NULL, &rt2_attributes);
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <main+0xf0>)
 8000612:	2100      	movs	r1, #0
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <main+0xf4>)
 8000616:	f002 fc0f 	bl	8002e38 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <main+0xf8>)
 800061e:	6013      	str	r3, [r2, #0]

	  /* creation of scope */
	  scopeHandle = osThreadNew(StartScope, NULL, &scope_attributes);
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <main+0xfc>)
 8000622:	2100      	movs	r1, #0
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <main+0x100>)
 8000626:	f002 fc07 	bl	8002e38 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <main+0x104>)
 800062e:	6013      	str	r3, [r2, #0]

	  /* creation of diag */
	  diagHandle = osThreadNew(StartDiag, NULL, &diag_attributes);
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <main+0x108>)
 8000632:	2100      	movs	r1, #0
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0x10c>)
 8000636:	f002 fbff 	bl	8002e38 <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <main+0x110>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f002 fbd4 	bl	8002dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0xc0>
 8000646:	bf00      	nop
 8000648:	200000e8 	.word	0x200000e8
 800064c:	200000f4 	.word	0x200000f4
 8000650:	200000fc 	.word	0x200000fc
 8000654:	20000104 	.word	0x20000104
 8000658:	2000010c 	.word	0x2000010c
 800065c:	080075a0 	.word	0x080075a0
 8000660:	08000859 	.word	0x08000859
 8000664:	200000d4 	.word	0x200000d4
 8000668:	080075c4 	.word	0x080075c4
 800066c:	08000975 	.word	0x08000975
 8000670:	200000d8 	.word	0x200000d8
 8000674:	080075e8 	.word	0x080075e8
 8000678:	08000a7d 	.word	0x08000a7d
 800067c:	200000dc 	.word	0x200000dc
 8000680:	0800760c 	.word	0x0800760c
 8000684:	08000b99 	.word	0x08000b99
 8000688:	200000e0 	.word	0x200000e0
 800068c:	08007630 	.word	0x08007630
 8000690:	08000c91 	.word	0x08000c91
 8000694:	200000e4 	.word	0x200000e4

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b092      	sub	sp, #72	; 0x48
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fd31 	bl	800610e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2310      	movs	r3, #16
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ce:	2310      	movs	r3, #16
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d8:	2304      	movs	r3, #4
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006dc:	2307      	movs	r3, #7
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f80d 	bl	8001704 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006f0:	f000 fb50 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fa70 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800071a:	f000 fb3b 	bl	8000d94 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3748      	adds	r7, #72	; 0x48
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f001 ff1a 	bl	8002598 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 fb13 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000090 	.word	0x20000090
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	; (800084c <MX_GPIO_Init+0xd0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a25      	ldr	r2, [pc, #148]	; (800084c <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000808:	f000 ff62 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000824:	f000 fdd0 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fdc2 	bl	80013c8 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020800 	.word	0x40020800

08000858 <startEncoder>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startEncoder */
void startEncoder(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xNextWakeTime;
	const TickType_t xBlockTime = mainENCODER_TICK_FREQUENCY;
 8000860:	2305      	movs	r3, #5
 8000862:	617b      	str	r3, [r7, #20]
    xNextWakeTime = xTaskGetTickCount();
 8000864:	f003 fe80 	bl	8004568 <xTaskGetTickCount>
 8000868:	4603      	mov	r3, r0
 800086a:	60bb      	str	r3, [r7, #8]

    ( void ) argument;

    xSemaphoreTake(enc_data.lock, portMAX_DELAY);
 800086c:	4b3f      	ldr	r3, [pc, #252]	; (800096c <startEncoder+0x114>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000874:	4618      	mov	r0, r3
 8000876:	f003 f85f 	bl	8003938 <xQueueSemaphoreTake>
    enc_data.slit = 0;
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <startEncoder+0x114>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
    enc_data.home_slit = 0;
 8000880:	4b3a      	ldr	r3, [pc, #232]	; (800096c <startEncoder+0x114>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
    xSemaphoreGive(enc_data.lock);
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <startEncoder+0x114>)
 8000888:	6898      	ldr	r0, [r3, #8]
 800088a:	2300      	movs	r3, #0
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	f002 fdd8 	bl	8003444 <xQueueGenericSend>

    unsigned int count = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    unsigned int slit_count = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
    unsigned int prev_slit = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]

    /* Randomized period (75-750 RPM) */
	srand(time(NULL));
 80008a0:	2000      	movs	r0, #0
 80008a2:	f005 fe33 	bl	800650c <time>
 80008a6:	4602      	mov	r2, r0
 80008a8:	460b      	mov	r3, r1
 80008aa:	4613      	mov	r3, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 fce3 	bl	8006278 <srand>

	unsigned int semi_per = (rand() % 10) + 1;
 80008b2:	f005 fd0f 	bl	80062d4 <rand>
 80008b6:	4601      	mov	r1, r0
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <startEncoder+0x118>)
 80008ba:	fb83 2301 	smull	r2, r3, r3, r1
 80008be:	109a      	asrs	r2, r3, #2
 80008c0:	17cb      	asrs	r3, r1, #31
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	1aca      	subs	r2, r1, r3
 80008ce:	1c53      	adds	r3, r2, #1
 80008d0:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	6979      	ldr	r1, [r7, #20]
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fc77 	bl	80041cc <vTaskDelayUntil>

      xSemaphoreTake(enc_data.lock, portMAX_DELAY);
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <startEncoder+0x114>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 f826 	bl	8003938 <xQueueSemaphoreTake>
      prev_slit = enc_data.slit;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <startEncoder+0x114>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	613b      	str	r3, [r7, #16]
		if (count%semi_per == 0) {
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80008fa:	68f9      	ldr	r1, [r7, #12]
 80008fc:	fb01 f202 	mul.w	r2, r1, r2
 8000900:	1a9b      	subs	r3, r3, r2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <startEncoder+0xc4>
			enc_data.slit++;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <startEncoder+0x114>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <startEncoder+0x114>)
 800090e:	6013      	str	r3, [r2, #0]
			enc_data.slit%=2;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <startEncoder+0x114>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <startEncoder+0x114>)
 800091a:	6013      	str	r3, [r2, #0]
		}

		if (prev_slit==0&&enc_data.slit==1) 					//fronte di salita
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10a      	bne.n	8000938 <startEncoder+0xe0>
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <startEncoder+0x114>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d106      	bne.n	8000938 <startEncoder+0xe0>
			slit_count=(++slit_count)%8;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3301      	adds	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61bb      	str	r3, [r7, #24]

		if (slit_count==0) enc_data.home_slit=enc_data.slit;
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d104      	bne.n	8000948 <startEncoder+0xf0>
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <startEncoder+0x114>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <startEncoder+0x114>)
 8000944:	6053      	str	r3, [r2, #4]
 8000946:	e002      	b.n	800094e <startEncoder+0xf6>
		else enc_data.home_slit=0;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <startEncoder+0x114>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]

		//sprintf(MSG,"%d:\t\t %d %d\n",count,enc_data.slit,enc_data.home_slit);	//DEBUG encoder
		//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
		count++;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
      xSemaphoreGive(enc_data.lock);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <startEncoder+0x114>)
 8000956:	6898      	ldr	r0, [r3, #8]
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	f002 fd71 	bl	8003444 <xQueueGenericSend>

    osDelay(1);
 8000962:	2001      	movs	r0, #1
 8000964:	f002 fafa 	bl	8002f5c <osDelay>
      vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000968:	e7b3      	b.n	80008d2 <startEncoder+0x7a>
 800096a:	bf00      	nop
 800096c:	200000e8 	.word	0x200000e8
 8000970:	66666667 	.word	0x66666667

08000974 <StartRt1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRt1 */
void StartRt1(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0a0      	sub	sp, #128	; 0x80
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRt1 */
	TickType_t xNextWakeTime;
	const TickType_t xBlockTime = mainTASK1_TICK_FREQUENCY;
 800097c:	2302      	movs	r3, #2
 800097e:	67bb      	str	r3, [r7, #120]	; 0x78

	    /* Prevent the compiler warning about the unused parameter. */
	xNextWakeTime = xTaskGetTickCount();
 8000980:	f003 fdf2 	bl	8004568 <xTaskGetTickCount>
 8000984:	4603      	mov	r3, r0
 8000986:	66fb      	str	r3, [r7, #108]	; 0x6c
	( void ) argument;
	    /*per lo slack time*/
	TickType_t xFinishTime;

	xSemaphoreTake(rising_edge.lock, portMAX_DELAY);
 8000988:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <StartRt1+0xfc>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000990:	4618      	mov	r0, r3
 8000992:	f002 ffd1 	bl	8003938 <xQueueSemaphoreTake>
	rising_edge.count = 0;
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <StartRt1+0xfc>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(rising_edge.lock);
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <StartRt1+0xfc>)
 800099e:	6858      	ldr	r0, [r3, #4]
 80009a0:	2300      	movs	r3, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	f002 fd4d 	bl	8003444 <xQueueGenericSend>

	int last_value = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t MSG[100] = {'\0'};
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2260      	movs	r2, #96	; 0x60
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 fba7 	bl	800610e <memset>
	unsigned long int slack;

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 80009c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fc00 	bl	80041cc <vTaskDelayUntil>

      xSemaphoreTake(enc_data.lock, portMAX_DELAY);
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <StartRt1+0x100>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 ffaf 	bl	8003938 <xQueueSemaphoreTake>
      if( last_value == 0 && enc_data.slit == 1){
 80009da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d119      	bne.n	8000a14 <StartRt1+0xa0>
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <StartRt1+0x100>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d115      	bne.n	8000a14 <StartRt1+0xa0>
    	  last_value = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	67fb      	str	r3, [r7, #124]	; 0x7c

    	  xSemaphoreTake(rising_edge.lock, portMAX_DELAY);
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <StartRt1+0xfc>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 ff9f 	bl	8003938 <xQueueSemaphoreTake>
    	  rising_edge.count++;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <StartRt1+0xfc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <StartRt1+0xfc>)
 8000a02:	6013      	str	r3, [r2, #0]
    	  xSemaphoreGive(rising_edge.lock);
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <StartRt1+0xfc>)
 8000a06:	6858      	ldr	r0, [r3, #4]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f002 fd19 	bl	8003444 <xQueueGenericSend>
 8000a12:	e008      	b.n	8000a26 <StartRt1+0xb2>

      }
      else if(last_value == 1 && enc_data.slit == 0){
 8000a14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d105      	bne.n	8000a26 <StartRt1+0xb2>
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <StartRt1+0x100>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <StartRt1+0xb2>
    	  last_value = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	67fb      	str	r3, [r7, #124]	; 0x7c
      }

      xSemaphoreGive(enc_data.lock);
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <StartRt1+0x100>)
 8000a28:	6898      	ldr	r0, [r3, #8]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f002 fd08 	bl	8003444 <xQueueGenericSend>


      xFinishTime = xTaskGetTickCount();
 8000a34:	f003 fd98 	bl	8004568 <xTaskGetTickCount>
 8000a38:	6778      	str	r0, [r7, #116]	; 0x74
      slack = (xBlockTime + xNextWakeTime - xFinishTime) * portTICK_PERIOD_MS  ;
 8000a3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a3e:	441a      	add	r2, r3
 8000a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	673b      	str	r3, [r7, #112]	; 0x70
      if(slack>=0){
          xSemaphoreTake(slack_rt1.lock, portMAX_DELAY);
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <StartRt1+0x104>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 ff72 	bl	8003938 <xQueueSemaphoreTake>
          slack_rt1.slack_time = slack;
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <StartRt1+0x104>)
 8000a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a58:	6013      	str	r3, [r2, #0]
          xSemaphoreGive(slack_rt1.lock);
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <StartRt1+0x104>)
 8000a5c:	6858      	ldr	r0, [r3, #4]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	f002 fcee 	bl	8003444 <xQueueGenericSend>
      else{
          sprintf(MSG,"Task rt1: deadline miss. deadline: %lu, finish time: %lu\n",xNextWakeTime + xBlockTime ,xFinishTime);
          HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
      }

    osDelay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f002 fa77 	bl	8002f5c <osDelay>
	  vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000a6e:	e7a7      	b.n	80009c0 <StartRt1+0x4c>
 8000a70:	200000f4 	.word	0x200000f4
 8000a74:	200000e8 	.word	0x200000e8
 8000a78:	20000104 	.word	0x20000104

08000a7c <StartRt2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRt2 */
void StartRt2(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0a4      	sub	sp, #144	; 0x90
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRt2 */
	TickType_t xNextWakeTime;
	const TickType_t xBlockTime = mainTASK2_TICK_FREQUENCY;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	xNextWakeTime = xTaskGetTickCount();
 8000a8a:	f003 fd6d 	bl	8004568 <xTaskGetTickCount>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	673b      	str	r3, [r7, #112]	; 0x70
	( void ) argument;

	TickType_t time_home;
	TickType_t last_time_home;

	int first_measure = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int last_home_slit = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	TickType_t xFinishTime;
	unsigned long int slack;
	uint8_t MSG[100] = {'\0'};
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2260      	movs	r2, #96	; 0x60
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f005 fb2f 	bl	800610e <memset>


  /* Infinite loop */
	for(;;)
	{
		 vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000ab0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ab4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fb87 	bl	80041cc <vTaskDelayUntil>
		 xSemaphoreTake(enc_data.lock, portMAX_DELAY);
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <StartRt2+0x110>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 ff36 	bl	8003938 <xQueueSemaphoreTake>
		 if(enc_data.home_slit == 1 && last_home_slit == 0){
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <StartRt2+0x110>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d12d      	bne.n	8000b30 <StartRt2+0xb4>
 8000ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d129      	bne.n	8000b30 <StartRt2+0xb4>
			 last_home_slit = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			 if(first_measure){
 8000ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <StartRt2+0x7e>
				 last_time_home = xTaskGetTickCount();
 8000aea:	f003 fd3d 	bl	8004568 <xTaskGetTickCount>
 8000aee:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				 first_measure = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			 if(first_measure){
 8000af8:	e021      	b.n	8000b3e <StartRt2+0xc2>
			 }
			 else{
				 time_home = xTaskGetTickCount();
 8000afa:	f003 fd35 	bl	8004568 <xTaskGetTickCount>
 8000afe:	67f8      	str	r0, [r7, #124]	; 0x7c
				 xSemaphoreTake(round_time.lock, portMAX_DELAY);
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <StartRt2+0x114>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 ff15 	bl	8003938 <xQueueSemaphoreTake>
				 round_time.time_diff = portTICK_PERIOD_MS*(time_home - last_time_home);
 8000b0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <StartRt2+0x114>)
 8000b18:	6013      	str	r3, [r2, #0]
				 xSemaphoreGive(round_time.lock);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <StartRt2+0x114>)
 8000b1c:	6858      	ldr	r0, [r3, #4]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	f002 fc8e 	bl	8003444 <xQueueGenericSend>
				 last_time_home = time_home;
 8000b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			 if(first_measure){
 8000b2e:	e006      	b.n	8000b3e <StartRt2+0xc2>
			 }
		 }
		 else if(enc_data.home_slit == 0){
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <StartRt2+0x110>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <StartRt2+0xc2>
			 last_home_slit = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		 }
		 xSemaphoreGive(enc_data.lock);
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <StartRt2+0x110>)
 8000b40:	6898      	ldr	r0, [r3, #8]
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	f002 fc7c 	bl	8003444 <xQueueGenericSend>

		 xFinishTime = xTaskGetTickCount();
 8000b4c:	f003 fd0c 	bl	8004568 <xTaskGetTickCount>
 8000b50:	67b8      	str	r0, [r7, #120]	; 0x78
		 slack = (xBlockTime + xNextWakeTime - xFinishTime)*portTICK_PERIOD_MS;
 8000b52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b58:	441a      	add	r2, r3
 8000b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	677b      	str	r3, [r7, #116]	; 0x74
		 if(slack >= 0){
			 xSemaphoreTake(slack_rt2.lock, portMAX_DELAY);
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <StartRt2+0x118>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fee5 	bl	8003938 <xQueueSemaphoreTake>
			 slack_rt2.slack_time = slack;
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <StartRt2+0x118>)
 8000b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b72:	6013      	str	r3, [r2, #0]
			 xSemaphoreGive(slack_rt2.lock);
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <StartRt2+0x118>)
 8000b76:	6858      	ldr	r0, [r3, #4]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f002 fc61 	bl	8003444 <xQueueGenericSend>
			printf("Task rt2: deadline: %lu, finish time: %lu\n",xNextWakeTime + xBlockTime ,xFinishTime);
			sprintf(MSG,"Task rt2: deadline: %lu, finish time: %lu\n",xNextWakeTime + xBlockTime ,xFinishTime);
			HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
	     }

    osDelay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f002 f9ea 	bl	8002f5c <osDelay>
		 vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000b88:	e792      	b.n	8000ab0 <StartRt2+0x34>
 8000b8a:	bf00      	nop
 8000b8c:	200000e8 	.word	0x200000e8
 8000b90:	200000fc 	.word	0x200000fc
 8000b94:	2000010c 	.word	0x2000010c

08000b98 <StartScope>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartScope */
void StartScope(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a0      	sub	sp, #128	; 0x80
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartScope */
	TickType_t xNextWakeTime;
	const TickType_t xBlockTime = mainTASK2_TICK_FREQUENCY;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Prevent the compiler warning about the unused parameter. */
	xNextWakeTime = xTaskGetTickCount();
 8000ba4:	f003 fce0 	bl	8004568 <xTaskGetTickCount>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	66fb      	str	r3, [r7, #108]	; 0x6c
	( void ) argument;

	unsigned int count=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	67bb      	str	r3, [r7, #120]	; 0x78
	float diff_us = 0;
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	677b      	str	r3, [r7, #116]	; 0x74
	unsigned int rpm = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MSG[100] = {'\0'};
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2260      	movs	r2, #96	; 0x60
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 faa1 	bl	800610e <memset>

  /* Infinite loop */
	for(;;)
	{
		vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fafa 	bl	80041cc <vTaskDelayUntil>

		xSemaphoreTake(rising_edge.lock, portMAX_DELAY);
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <StartScope+0xe0>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fea9 	bl	8003938 <xQueueSemaphoreTake>
		count = rising_edge.count;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <StartScope+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	67bb      	str	r3, [r7, #120]	; 0x78
		xSemaphoreGive(rising_edge.lock);
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <StartScope+0xe0>)
 8000bee:	6858      	ldr	r0, [r3, #4]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f002 fc25 	bl	8003444 <xQueueGenericSend>

		printf("Rising Edge Counter : %d\t",count);
 8000bfa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <StartScope+0xe4>)
 8000bfe:	f005 fb23 	bl	8006248 <iprintf>

		xSemaphoreTake(round_time.lock, portMAX_DELAY);
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <StartScope+0xe8>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fe94 	bl	8003938 <xQueueSemaphoreTake>
		diff_us = round_time.time_diff * 1000;        //difference in microseconds
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <StartScope+0xe8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c24:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		xSemaphoreGive(round_time.lock);
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <StartScope+0xe8>)
 8000c2a:	6858      	ldr	r0, [r3, #4]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	f002 fc07 	bl	8003444 <xQueueGenericSend>

		rpm = (unsigned int)((float)60*1000000/diff_us);
 8000c36:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000c84 <StartScope+0xec>
 8000c3a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c46:	ee17 3a90 	vmov	r3, s15
 8000c4a:	673b      	str	r3, [r7, #112]	; 0x70

		//printf("diff : %f\t",diff_us);				//DEBUG

		printf( "RPM : %u\n",rpm);
 8000c4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <StartScope+0xf0>)
 8000c50:	f005 fafa 	bl	8006248 <iprintf>
		sprintf(MSG, "RPM : %u\n",rpm);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c5a:	490b      	ldr	r1, [pc, #44]	; (8000c88 <StartScope+0xf0>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f005 fbf1 	bl	8006444 <siprintf>
		HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000c62:	f107 0108 	add.w	r1, r7, #8
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	2264      	movs	r2, #100	; 0x64
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <StartScope+0xf4>)
 8000c6c:	f001 fce1 	bl	8002632 <HAL_UART_Transmit>
		osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f002 f973 	bl	8002f5c <osDelay>
		vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000c76:	e7a9      	b.n	8000bcc <StartScope+0x34>
 8000c78:	200000f4 	.word	0x200000f4
 8000c7c:	08007538 	.word	0x08007538
 8000c80:	200000fc 	.word	0x200000fc
 8000c84:	4c64e1c0 	.word	0x4c64e1c0
 8000c88:	08007554 	.word	0x08007554
 8000c8c:	20000090 	.word	0x20000090

08000c90 <StartDiag>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDiag */
void StartDiag(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a0      	sub	sp, #128	; 0x80
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDiag */
	TickType_t xNextWakeTime;
	const TickType_t xBlockTime = mainDIAG_TICK_FREQUENCY;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	677b      	str	r3, [r7, #116]	; 0x74

	/* Prevent the compiler warning about the unused parameter. */
	( void ) argument;
	xNextWakeTime = xTaskGetTickCount();
 8000c9c:	f003 fc64 	bl	8004568 <xTaskGetTickCount>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	66fb      	str	r3, [r7, #108]	; 0x6c

	unsigned long int avg_slack=0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
	int i = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	67bb      	str	r3, [r7, #120]	; 0x78
	int rounds = 100;
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MSG[100] = {'\0'};
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2260      	movs	r2, #96	; 0x60
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 fa26 	bl	800610e <memset>
	/* Infinite loop */
	for(;;)
	{
		vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000cc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fa7f 	bl	80041cc <vTaskDelayUntil>

    	xSemaphoreTake(slack_rt1.lock, portMAX_DELAY);
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <StartDiag+0xd0>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fe2e 	bl	8003938 <xQueueSemaphoreTake>
    	xSemaphoreTake(slack_rt2.lock, portMAX_DELAY);
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <StartDiag+0xd4>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fe27 	bl	8003938 <xQueueSemaphoreTake>

    	avg_slack += (slack_rt1.slack_time + slack_rt2.slack_time)/2 * 1000; 	//average in microseconds
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <StartDiag+0xd0>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <StartDiag+0xd4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d00:	4413      	add	r3, r2
 8000d02:	67fb      	str	r3, [r7, #124]	; 0x7c

    	xSemaphoreGive(slack_rt1.lock);
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <StartDiag+0xd0>)
 8000d06:	6858      	ldr	r0, [r3, #4]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f002 fb99 	bl	8003444 <xQueueGenericSend>
    	xSemaphoreGive(slack_rt2.lock);
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <StartDiag+0xd4>)
 8000d14:	6858      	ldr	r0, [r3, #4]
 8000d16:	2300      	movs	r3, #0
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f002 fb92 	bl	8003444 <xQueueGenericSend>

    	i++;
 8000d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d22:	3301      	adds	r3, #1
 8000d24:	67bb      	str	r3, [r7, #120]	; 0x78
    	if(i == rounds){
 8000d26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d114      	bne.n	8000d58 <StartDiag+0xc8>
    		avg_slack = avg_slack/rounds;
 8000d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	67fb      	str	r3, [r7, #124]	; 0x7c
    		sprintf(MSG, "**********SLACK TIME: %ld us**********\n",avg_slack);
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d3e:	490a      	ldr	r1, [pc, #40]	; (8000d68 <StartDiag+0xd8>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fb7f 	bl	8006444 <siprintf>
    		HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000d46:	f107 0108 	add.w	r1, r7, #8
 8000d4a:	2364      	movs	r3, #100	; 0x64
 8000d4c:	2264      	movs	r2, #100	; 0x64
 8000d4e:	4807      	ldr	r0, [pc, #28]	; (8000d6c <StartDiag+0xdc>)
 8000d50:	f001 fc6f 	bl	8002632 <HAL_UART_Transmit>
    		i = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	67bb      	str	r3, [r7, #120]	; 0x78
    	}
    	osDelay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f002 f8ff 	bl	8002f5c <osDelay>
		vTaskDelayUntil( &xNextWakeTime, xBlockTime );
 8000d5e:	e7b0      	b.n	8000cc2 <StartDiag+0x32>
 8000d60:	20000104 	.word	0x20000104
 8000d64:	2000010c 	.word	0x2000010c
 8000d68:	08007560 	.word	0x08007560
 8000d6c:	20000090 	.word	0x20000090

08000d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d82:	f000 fa1f 	bl	80011c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40000c00 	.word	0x40000c00

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_MspInit+0x54>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_MspInit+0x54>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x54>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_MspInit+0x54>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_MspInit+0x54>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_MspInit+0x54>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	210f      	movs	r1, #15
 8000de2:	f06f 0001 	mvn.w	r0, #1
 8000de6:	f000 fac5 	bl	8001374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12b      	bne.n	8000e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e52:	230c      	movs	r3, #12
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e62:	2307      	movs	r3, #7
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e6e:	f000 faab 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	2032      	movs	r0, #50	; 0x32
 8000e9e:	f000 fa69 	bl	8001374 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ea2:	2032      	movs	r0, #50	; 0x32
 8000ea4:	f000 fa82 	bl	80013ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_InitTick+0xa4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <HAL_InitTick+0xa4>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_InitTick+0xa4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec4:	f107 0210 	add.w	r2, r7, #16
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f8b0 	bl	8002034 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ed4:	f001 f886 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_InitTick+0xa8>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_InitTick+0xac>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_InitTick+0xb0>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_InitTick+0xac>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_InitTick+0xac>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_InitTick+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_InitTick+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_InitTick+0xac>)
 8000f0e:	f001 f8c3 	bl	8002098 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d104      	bne.n	8000f22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_InitTick+0xac>)
 8000f1a:	f001 f917 	bl	800214c <HAL_TIM_Base_Start_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	20000114 	.word	0x20000114
 8000f38:	40000c00 	.word	0x40000c00

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM5_IRQHandler+0x10>)
 8000f6e:	f001 f94f 	bl	8002210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000114 	.word	0x20000114

08000f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_kill>:

int _kill(int pid, int sig)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f96:	f004 ff89 	bl	8005eac <__errno>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2216      	movs	r2, #22
 8000f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe7 	bl	8000f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fbe:	e7fe      	b.n	8000fbe <_exit+0x12>

08000fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
	}

return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
	}
	return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	605a      	str	r2, [r3, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f004 feee 	bl	8005eac <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20018000 	.word	0x20018000
 80010fc:	00000400 	.word	0x00000400
 8001100:	2000015c 	.word	0x2000015c
 8001104:	20004b88 	.word	0x20004b88

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001156:	f7ff ffd7 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f004 ffa3 	bl	80060a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fa11 	bl	8000584 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001164:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001170:	080077c4 	.word	0x080077c4
  ldr r2, =_sbss
 8001174:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001178:	20004b84 	.word	0x20004b84

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f8d8 	bl	800135e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f7ff fe6a 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fdf4 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000160 	.word	0x20000160

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000160 	.word	0x20000160

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff4c 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001386:	f7ff ff61 	bl	800124c <__NVIC_GetPriorityGrouping>
 800138a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff ffb1 	bl	80012f8 <NVIC_EncodePriority>
 8001396:	4602      	mov	r2, r0
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff80 	bl	80012a4 <__NVIC_SetPriority>
}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff54 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e159      	b.n	8001698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8148 	bne.w	8001692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	2b02      	cmp	r3, #2
 8001418:	d130      	bne.n	800147c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a2 	beq.w	8001692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b57      	ldr	r3, [pc, #348]	; (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x2ec>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x202>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2f4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x1fe>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a47      	ldr	r2, [pc, #284]	; (80016c0 <HAL_GPIO_Init+0x2f8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <HAL_GPIO_Init+0x2fc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x1f6>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <HAL_GPIO_Init+0x300>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x1f2>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e008      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015ba:	2307      	movs	r3, #7
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015be:	2303      	movs	r3, #3
 80015c0:	e004      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x204>
 80015ca:	2300      	movs	r3, #0
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	f002 0203 	and.w	r2, r2, #3
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	4093      	lsls	r3, r2
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015dc:	4935      	ldr	r1, [pc, #212]	; (80016b4 <HAL_GPIO_Init+0x2ec>)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_GPIO_Init+0x304>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160e:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <HAL_GPIO_Init+0x304>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_GPIO_Init+0x304>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001638:	4a24      	ldr	r2, [pc, #144]	; (80016cc <HAL_GPIO_Init+0x304>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_GPIO_Init+0x304>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_GPIO_Init+0x304>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168c:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	f67f aea2 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40013800 	.word	0x40013800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e267      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b82      	ldr	r3, [pc, #520]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e242      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6f      	ldr	r2, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6c      	ldr	r2, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fd16 	bl	80011ec <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fd12 	bl	80011ec <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e207      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fd02 	bl	80011ec <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fcfe 	bl	80011ec <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fcb7 	bl	80011ec <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fcb3 	bl	80011ec <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a8      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4925      	ldr	r1, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc96 	bl	80011ec <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc92 	bl	80011ec <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e187      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d036      	beq.n	800195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fc76 	bl	80011ec <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fc72 	bl	80011ec <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e167      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x248>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fc5f 	bl	80011ec <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00e      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fc5b 	bl	80011ec <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d907      	bls.n	8001950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e150      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ea      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8097 	beq.w	8001a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fc1b 	bl	80011ec <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fc17 	bl	80011ec <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ea>
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fbdc 	bl	80011ec <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fbd8 	bl	80011ec <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0cb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fbc6 	bl	80011ec <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fbc2 	bl	80011ec <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b5      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a1 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d05c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d141      	bne.n	8001b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb96 	bl	80011ec <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb92 	bl	80011ec <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	491b      	ldr	r1, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb6b 	bl	80011ec <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb67 	bl	80011ec <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x416>
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb54 	bl	80011ec <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fb50 	bl	80011ec <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e045      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e038      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff fa82 	bl	80011ec <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff fa7e 	bl	80011ec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f874 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08007654 	.word	0x08007654
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b094      	sub	sp, #80	; 0x50
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80e1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0db      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001df8:	e0db      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dfe:	e0d8      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6139      	str	r1, [r7, #16]
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e64:	4659      	mov	r1, fp
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4651      	mov	r1, sl
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4651      	mov	r1, sl
 8001e74:	ebb2 0801 	subs.w	r8, r2, r1
 8001e78:	4659      	mov	r1, fp
 8001e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb18 0303 	adds.w	r3, r8, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb49 0303 	adc.w	r3, r9, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	024b      	lsls	r3, r1, #9
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	024a      	lsls	r2, r1, #9
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed0:	f7fe f9d6 	bl	8000280 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	e058      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4611      	mov	r1, r2
 8001eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0159      	lsls	r1, r3, #5
 8001f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0a:	0150      	lsls	r0, r2, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f16:	4649      	mov	r1, r9
 8001f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f30:	ebb2 040a 	subs.w	r4, r2, sl
 8001f34:	eb63 050b 	sbc.w	r5, r3, fp
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	00eb      	lsls	r3, r5, #3
 8001f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f46:	00e2      	lsls	r2, r4, #3
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	18e3      	adds	r3, r4, r3
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	464b      	mov	r3, r9
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f66:	4629      	mov	r1, r5
 8001f68:	028b      	lsls	r3, r1, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f70:	4621      	mov	r1, r4
 8001f72:	028a      	lsls	r2, r1, #10
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	61fa      	str	r2, [r7, #28]
 8001f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f84:	f7fe f97c 	bl	8000280 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3750      	adds	r7, #80	; 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	08007664 	.word	0x08007664

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08007664 	.word	0x08007664

08002034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	220f      	movs	r2, #15
 8002042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_RCC_GetClockConfig+0x60>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0207 	and.w	r2, r3, #7
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e041      	b.n	800212e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f839 	bl	8002136 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 f9ca 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e044      	b.n	80021ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_TIM_Base_Start_IT+0xb0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d018      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d013      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <HAL_TIM_Base_Start_IT+0xb4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00e      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x6c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_TIM_Base_Start_IT+0xb8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x6c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_TIM_Base_Start_IT+0xbc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x6c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_TIM_Base_Start_IT+0xc0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d010      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	e007      	b.n	80021ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40010000 	.word	0x40010000
 8002200:	40000400 	.word	0x40000400
 8002204:	40000800 	.word	0x40000800
 8002208:	40000c00 	.word	0x40000c00
 800220c:	40014000 	.word	0x40014000

08002210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d122      	bne.n	800226c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b02      	cmp	r3, #2
 8002232:	d11b      	bne.n	800226c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0202 	mvn.w	r2, #2
 800223c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8ee 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8e0 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8f1 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d122      	bne.n	80022c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b04      	cmp	r3, #4
 8002286:	d11b      	bne.n	80022c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0204 	mvn.w	r2, #4
 8002290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8c4 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 80022ac:	e005      	b.n	80022ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8b6 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f8c7 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d122      	bne.n	8002314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d11b      	bne.n	8002314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0208 	mvn.w	r2, #8
 80022e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2204      	movs	r2, #4
 80022ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f89a 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 8002300:	e005      	b.n	800230e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f88c 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f89d 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b10      	cmp	r3, #16
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b10      	cmp	r3, #16
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0210 	mvn.w	r2, #16
 8002338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2208      	movs	r2, #8
 800233e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f870 	bl	8002434 <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f862 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f873 	bl	8002448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10e      	bne.n	8002394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d107      	bne.n	8002394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0201 	mvn.w	r2, #1
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fcee 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d10e      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d107      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8e2 	bl	8002584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d10e      	bne.n	80023ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d107      	bne.n	80023ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f838 	bl	800245c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d10e      	bne.n	8002418 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b20      	cmp	r3, #32
 8002406:	d107      	bne.n	8002418 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0220 	mvn.w	r2, #32
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8ac 	bl	8002570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <TIM_Base_SetConfig+0xe4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00f      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <TIM_Base_SetConfig+0xe8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <TIM_Base_SetConfig+0xec>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x38>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <TIM_Base_SetConfig+0xf0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <TIM_Base_SetConfig+0xe4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01b      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d017      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <TIM_Base_SetConfig+0xe8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <TIM_Base_SetConfig+0xec>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00f      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a20      	ldr	r2, [pc, #128]	; (8002560 <TIM_Base_SetConfig+0xf0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <TIM_Base_SetConfig+0xf4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <TIM_Base_SetConfig+0xf8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x8a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <TIM_Base_SetConfig+0xfc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <TIM_Base_SetConfig+0xe4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40000c00 	.word	0x40000c00
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400
 800256c:	40014800 	.word	0x40014800

08002570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e03f      	b.n	800262a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fc1a 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f929 	bl	8002834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b08a      	sub	sp, #40	; 0x28
 8002636:	af02      	add	r7, sp, #8
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	d17c      	bne.n	800274c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_UART_Transmit+0x2c>
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e075      	b.n	800274e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_UART_Transmit+0x3e>
 800266c:	2302      	movs	r3, #2
 800266e:	e06e      	b.n	800274e <HAL_UART_Transmit+0x11c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2221      	movs	r2, #33	; 0x21
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002686:	f7fe fdb1 	bl	80011ec <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a0:	d108      	bne.n	80026b4 <HAL_UART_Transmit+0x82>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d104      	bne.n	80026b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	e003      	b.n	80026bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026c4:	e02a      	b.n	800271c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f840 	bl	8002756 <UART_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e036      	b.n	800274e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10b      	bne.n	80026fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	3302      	adds	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	e007      	b.n	800270e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	3301      	adds	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1cf      	bne.n	80026c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	2140      	movs	r1, #64	; 0x40
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f810 	bl	8002756 <UART_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e006      	b.n	800274e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b090      	sub	sp, #64	; 0x40
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002766:	e050      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276e:	d04c      	beq.n	800280a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0x30>
 8002776:	f7fe fd39 	bl	80011ec <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002782:	429a      	cmp	r2, r3
 8002784:	d241      	bcs.n	800280a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a6:	637a      	str	r2, [r7, #52]	; 0x34
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e5      	bne.n	8002786 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027da:	623a      	str	r2, [r7, #32]
 80027dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	69f9      	ldr	r1, [r7, #28]
 80027e0:	6a3a      	ldr	r2, [r7, #32]
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e5      	bne.n	80027ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e00f      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4013      	ands	r3, r2
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	429a      	cmp	r2, r3
 8002826:	d09f      	beq.n	8002768 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3740      	adds	r7, #64	; 0x40
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002838:	b0c0      	sub	sp, #256	; 0x100
 800283a:	af00      	add	r7, sp, #0
 800283c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002850:	68d9      	ldr	r1, [r3, #12]
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	ea40 0301 	orr.w	r3, r0, r1
 800285c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	431a      	orrs	r2, r3
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800288c:	f021 010c 	bic.w	r1, r1, #12
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800289a:	430b      	orrs	r3, r1
 800289c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ae:	6999      	ldr	r1, [r3, #24]
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	ea40 0301 	orr.w	r3, r0, r1
 80028ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <UART_SetConfig+0x2cc>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d005      	beq.n	80028d4 <UART_SetConfig+0xa0>
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <UART_SetConfig+0x2d0>)
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d104      	bne.n	80028de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028d4:	f7ff fb9a 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80028d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028dc:	e003      	b.n	80028e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028de:	f7ff fb81 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 80028e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	f040 810c 	bne.w	8002b0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002902:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	1891      	adds	r1, r2, r2
 800290c:	65b9      	str	r1, [r7, #88]	; 0x58
 800290e:	415b      	adcs	r3, r3
 8002910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002912:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002916:	4621      	mov	r1, r4
 8002918:	eb12 0801 	adds.w	r8, r2, r1
 800291c:	4629      	mov	r1, r5
 800291e:	eb43 0901 	adc.w	r9, r3, r1
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002936:	4690      	mov	r8, r2
 8002938:	4699      	mov	r9, r3
 800293a:	4623      	mov	r3, r4
 800293c:	eb18 0303 	adds.w	r3, r8, r3
 8002940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002944:	462b      	mov	r3, r5
 8002946:	eb49 0303 	adc.w	r3, r9, r3
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800295a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800295e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002962:	460b      	mov	r3, r1
 8002964:	18db      	adds	r3, r3, r3
 8002966:	653b      	str	r3, [r7, #80]	; 0x50
 8002968:	4613      	mov	r3, r2
 800296a:	eb42 0303 	adc.w	r3, r2, r3
 800296e:	657b      	str	r3, [r7, #84]	; 0x54
 8002970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002978:	f7fd fc82 	bl	8000280 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011c      	lsls	r4, r3, #4
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002994:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002998:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800299c:	4642      	mov	r2, r8
 800299e:	464b      	mov	r3, r9
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029a4:	415b      	adcs	r3, r3
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029ac:	4641      	mov	r1, r8
 80029ae:	eb12 0a01 	adds.w	sl, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb43 0b01 	adc.w	fp, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029cc:	4692      	mov	sl, r2
 80029ce:	469b      	mov	fp, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	eb1a 0303 	adds.w	r3, sl, r3
 80029d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029da:	464b      	mov	r3, r9
 80029dc:	eb4b 0303 	adc.w	r3, fp, r3
 80029e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029f8:	460b      	mov	r3, r1
 80029fa:	18db      	adds	r3, r3, r3
 80029fc:	643b      	str	r3, [r7, #64]	; 0x40
 80029fe:	4613      	mov	r3, r2
 8002a00:	eb42 0303 	adc.w	r3, r2, r3
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
 8002a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a0e:	f7fd fc37 	bl	8000280 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2264      	movs	r2, #100	; 0x64
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	1acb      	subs	r3, r1, r3
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002a30:	fba3 2302 	umull	r2, r3, r3, r2
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a3c:	441c      	add	r4, r3
 8002a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	1891      	adds	r1, r2, r2
 8002a56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a58:	415b      	adcs	r3, r3
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a60:	4641      	mov	r1, r8
 8002a62:	1851      	adds	r1, r2, r1
 8002a64:	6339      	str	r1, [r7, #48]	; 0x30
 8002a66:	4649      	mov	r1, r9
 8002a68:	414b      	adcs	r3, r1
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a78:	4659      	mov	r1, fp
 8002a7a:	00cb      	lsls	r3, r1, #3
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a82:	4651      	mov	r1, sl
 8002a84:	00ca      	lsls	r2, r1, #3
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a94:	464b      	mov	r3, r9
 8002a96:	460a      	mov	r2, r1
 8002a98:	eb42 0303 	adc.w	r3, r2, r3
 8002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	18db      	adds	r3, r3, r3
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aba:	4613      	mov	r3, r2
 8002abc:	eb42 0303 	adc.w	r3, r2, r3
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002aca:	f7fd fbd9 	bl	8000280 <__aeabi_uldivmod>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	2164      	movs	r1, #100	; 0x64
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	f003 0207 	and.w	r2, r3, #7
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4422      	add	r2, r4
 8002afa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002afc:	e105      	b.n	8002d0a <UART_SetConfig+0x4d6>
 8002afe:	bf00      	nop
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40011400 	.word	0x40011400
 8002b08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b10:	2200      	movs	r2, #0
 8002b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b1e:	4642      	mov	r2, r8
 8002b20:	464b      	mov	r3, r9
 8002b22:	1891      	adds	r1, r2, r2
 8002b24:	6239      	str	r1, [r7, #32]
 8002b26:	415b      	adcs	r3, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b2e:	4641      	mov	r1, r8
 8002b30:	1854      	adds	r4, r2, r1
 8002b32:	4649      	mov	r1, r9
 8002b34:	eb43 0501 	adc.w	r5, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	00eb      	lsls	r3, r5, #3
 8002b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b46:	00e2      	lsls	r2, r4, #3
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	18e3      	adds	r3, r4, r3
 8002b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b54:	464b      	mov	r3, r9
 8002b56:	eb45 0303 	adc.w	r3, r5, r3
 8002b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	008b      	lsls	r3, r1, #2
 8002b7e:	4621      	mov	r1, r4
 8002b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b84:	4621      	mov	r1, r4
 8002b86:	008a      	lsls	r2, r1, #2
 8002b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b8c:	f7fd fb78 	bl	8000280 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002b96:	fba3 2302 	umull	r2, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	011c      	lsls	r4, r3, #4
 8002b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ba8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	1891      	adds	r1, r2, r2
 8002bb6:	61b9      	str	r1, [r7, #24]
 8002bb8:	415b      	adcs	r3, r3
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	1851      	adds	r1, r2, r1
 8002bc4:	6139      	str	r1, [r7, #16]
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	414b      	adcs	r3, r1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd8:	4659      	mov	r1, fp
 8002bda:	00cb      	lsls	r3, r1, #3
 8002bdc:	4651      	mov	r1, sl
 8002bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be2:	4651      	mov	r1, sl
 8002be4:	00ca      	lsls	r2, r1, #3
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	4642      	mov	r2, r8
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	460a      	mov	r2, r1
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c18:	4649      	mov	r1, r9
 8002c1a:	008b      	lsls	r3, r1, #2
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c22:	4641      	mov	r1, r8
 8002c24:	008a      	lsls	r2, r1, #2
 8002c26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c2a:	f7fd fb29 	bl	8000280 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	; 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	3332      	adds	r3, #50	; 0x32
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c52:	441c      	add	r4, r3
 8002c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c5c:	677a      	str	r2, [r7, #116]	; 0x74
 8002c5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c62:	4642      	mov	r2, r8
 8002c64:	464b      	mov	r3, r9
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c72:	4641      	mov	r1, r8
 8002c74:	1851      	adds	r1, r2, r1
 8002c76:	6039      	str	r1, [r7, #0]
 8002c78:	4649      	mov	r1, r9
 8002c7a:	414b      	adcs	r3, r1
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	00cb      	lsls	r3, r1, #3
 8002c8e:	4651      	mov	r1, sl
 8002c90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c94:	4651      	mov	r1, sl
 8002c96:	00ca      	lsls	r2, r1, #3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4642      	mov	r2, r8
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	460a      	mov	r2, r1
 8002ca8:	eb42 0303 	adc.w	r3, r2, r3
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb8:	667a      	str	r2, [r7, #100]	; 0x64
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	4641      	mov	r1, r8
 8002ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	008a      	lsls	r2, r1, #2
 8002cd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cd8:	f7fd fad2 	bl	8000280 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2164      	movs	r1, #100	; 0x64
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	; 0x32
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4422      	add	r2, r4
 8002d08:	609a      	str	r2, [r3, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	51eb851f 	.word	0x51eb851f

08002d1c <__NVIC_SetPriority>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	; (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SysTick_Handler+0x1c>)
 8002d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d78:	f001 ff36 	bl	8004be8 <xTaskGetSchedulerState>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d001      	beq.n	8002d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d82:	f002 fe19 	bl	80059b8 <xPortSysTickHandler>
  }
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d94:	2100      	movs	r1, #0
 8002d96:	f06f 0004 	mvn.w	r0, #4
 8002d9a:	f7ff ffbf 	bl	8002d1c <__NVIC_SetPriority>
#endif
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002daa:	f3ef 8305 	mrs	r3, IPSR
 8002dae:	603b      	str	r3, [r7, #0]
  return(result);
 8002db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002db6:	f06f 0305 	mvn.w	r3, #5
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	e00c      	b.n	8002dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <osKernelInitialize+0x44>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <osKernelInitialize+0x44>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	e002      	b.n	8002dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002dd8:	687b      	ldr	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000164 	.word	0x20000164

08002dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002df2:	f3ef 8305 	mrs	r3, IPSR
 8002df6:	603b      	str	r3, [r7, #0]
  return(result);
 8002df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002dfe:	f06f 0305 	mvn.w	r3, #5
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	e010      	b.n	8002e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <osKernelStart+0x48>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d109      	bne.n	8002e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e0e:	f7ff ffbf 	bl	8002d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <osKernelStart+0x48>)
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e18:	f001 fa8a 	bl	8004330 <vTaskStartScheduler>
      stat = osOK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	e002      	b.n	8002e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000164 	.word	0x20000164

08002e38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08e      	sub	sp, #56	; 0x38
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e48:	f3ef 8305 	mrs	r3, IPSR
 8002e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d17e      	bne.n	8002f52 <osThreadNew+0x11a>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d07b      	beq.n	8002f52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e5e:	2318      	movs	r3, #24
 8002e60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d045      	beq.n	8002efe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <osThreadNew+0x48>
        name = attr->name;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <osThreadNew+0x6e>
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b38      	cmp	r3, #56	; 0x38
 8002e98:	d805      	bhi.n	8002ea6 <osThreadNew+0x6e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <osThreadNew+0x72>
        return (NULL);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e054      	b.n	8002f54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <osThreadNew+0xa8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2bbb      	cmp	r3, #187	; 0xbb
 8002ec8:	d90a      	bls.n	8002ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <osThreadNew+0xa8>
        mem = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e010      	b.n	8002f02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10c      	bne.n	8002f02 <osThreadNew+0xca>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d108      	bne.n	8002f02 <osThreadNew+0xca>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <osThreadNew+0xca>
          mem = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e001      	b.n	8002f02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d110      	bne.n	8002f2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f10:	9202      	str	r2, [sp, #8]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6a3a      	ldr	r2, [r7, #32]
 8002f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 ff9c 	bl	8003e5c <xTaskCreateStatic>
 8002f24:	4603      	mov	r3, r0
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e013      	b.n	8002f52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d110      	bne.n	8002f52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 ffe7 	bl	8003f16 <xTaskCreate>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d001      	beq.n	8002f52 <osThreadNew+0x11a>
            hTask = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f52:	693b      	ldr	r3, [r7, #16]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f64:	f3ef 8305 	mrs	r3, IPSR
 8002f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <osDelay+0x1c>
    stat = osErrorISR;
 8002f70:	f06f 0305 	mvn.w	r3, #5
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e007      	b.n	8002f88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 f9a0 	bl	80042c8 <vTaskDelay>
    }
  }

  return (stat);
 8002f88:	68fb      	ldr	r3, [r7, #12]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8002faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000168 	.word	0x20000168
 8002fc4:	20000224 	.word	0x20000224

08002fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8002fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe6:	601a      	str	r2, [r3, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000424 	.word	0x20000424
 8002ff8:	200004e0 	.word	0x200004e0

08002ffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f103 0208 	add.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f103 0208 	add.w	r2, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 0208 	add.w	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b4:	d103      	bne.n	80030be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e00c      	b.n	80030d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3308      	adds	r3, #8
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e002      	b.n	80030cc <vListInsert+0x2e>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d2f6      	bcs.n	80030c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d103      	bne.n	8003144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800318e:	f002 fb81 	bl	8005894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	441a      	add	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	3b01      	subs	r3, #1
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	441a      	add	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	22ff      	movs	r2, #255	; 0xff
 80031d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d114      	bne.n	800320e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01a      	beq.n	8003222 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3310      	adds	r3, #16
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 fb37 	bl	8004864 <xTaskRemoveFromEventList>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <xQueueGenericReset+0xcc>)
 80031fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	e009      	b.n	8003222 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3310      	adds	r3, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fef2 	bl	8002ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3324      	adds	r3, #36	; 0x24
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff feed 	bl	8002ffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003222:	f002 fb67 	bl	80058f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	; 0x38
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <xQueueGenericCreateStatic+0x52>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <xQueueGenericCreateStatic+0x56>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <xQueueGenericCreateStatic+0x58>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	623b      	str	r3, [r7, #32]
}
 80032a2:	bf00      	nop
 80032a4:	e7fe      	b.n	80032a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <xQueueGenericCreateStatic+0x7e>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <xQueueGenericCreateStatic+0x82>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <xQueueGenericCreateStatic+0x84>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	61fb      	str	r3, [r7, #28]
}
 80032ce:	bf00      	nop
 80032d0:	e7fe      	b.n	80032d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032d2:	2350      	movs	r3, #80	; 0x50
 80032d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b50      	cmp	r3, #80	; 0x50
 80032da:	d00a      	beq.n	80032f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	61bb      	str	r3, [r7, #24]
}
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003306:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f83f 	bl	8003398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800331c:	4618      	mov	r0, r3
 800331e:	3730      	adds	r7, #48	; 0x30
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	613b      	str	r3, [r7, #16]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3350      	adds	r3, #80	; 0x50
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fbbb 	bl	8005ad8 <pvPortMalloc>
 8003362:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d011      	beq.n	800338e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3350      	adds	r3, #80	; 0x50
 8003372:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800337c:	79fa      	ldrb	r2, [r7, #7]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f805 	bl	8003398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800338e:	69bb      	ldr	r3, [r7, #24]
	}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e002      	b.n	80033ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033c6:	2101      	movs	r1, #1
 80033c8:	69b8      	ldr	r0, [r7, #24]
 80033ca:	f7ff fecb 	bl	8003164 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80033fe:	2300      	movs	r3, #0
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f81d 	bl	8003444 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800341c:	2301      	movs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	461a      	mov	r2, r3
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff7a 	bl	8003324 <xQueueGenericCreate>
 8003430:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff ffd3 	bl	80033de <prvInitialiseMutex>

		return xNewQueue;
 8003438:	68fb      	ldr	r3, [r7, #12]
	}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	; 0x38
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xQueueGenericSend+0x32>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <xQueueGenericSend+0x40>
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <xQueueGenericSend+0x44>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <xQueueGenericSend+0x46>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <xQueueGenericSend+0x60>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericSend+0x6e>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <xQueueGenericSend+0x72>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericSend+0x74>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d2:	f001 fb89 	bl	8004be8 <xTaskGetSchedulerState>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <xQueueGenericSend+0x9e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <xQueueGenericSend+0xa2>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <xQueueGenericSend+0xa4>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <xQueueGenericSend+0xbe>
	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	61fb      	str	r3, [r7, #28]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003502:	f002 f9c7 	bl	8005894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <xQueueGenericSend+0xd4>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d129      	bne.n	800356c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800351e:	f000 fb2f 	bl	8003b80 <prvCopyDataToQueue>
 8003522:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f997 	bl	8004864 <xTaskRemoveFromEventList>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800353c:	4b3f      	ldr	r3, [pc, #252]	; (800363c <xQueueGenericSend+0x1f8>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	e00a      	b.n	8003564 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <xQueueGenericSend+0x1f8>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003564:	f002 f9c6 	bl	80058f4 <vPortExitCritical>
				return pdPASS;
 8003568:	2301      	movs	r3, #1
 800356a:	e063      	b.n	8003634 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003572:	f002 f9bf 	bl	80058f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003576:	2300      	movs	r3, #0
 8003578:	e05c      	b.n	8003634 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4618      	mov	r0, r3
 8003586:	f001 f9d1 	bl	800492c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358e:	f002 f9b1 	bl	80058f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003592:	f000 ff3d 	bl	8004410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003596:	f002 f97d 	bl	8005894 <vPortEnterCritical>
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a6:	d103      	bne.n	80035b0 <xQueueGenericSend+0x16c>
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035bc:	d103      	bne.n	80035c6 <xQueueGenericSend+0x182>
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c6:	f002 f995 	bl	80058f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ca:	1d3a      	adds	r2, r7, #4
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f9c0 	bl	8004958 <xTaskCheckForTimeOut>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d124      	bne.n	8003628 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035e0:	f000 fbc6 	bl	8003d70 <prvIsQueueFull>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	3310      	adds	r3, #16
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f8e6 	bl	80047c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fa:	f000 fb51 	bl	8003ca0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035fe:	f000 ff15 	bl	800442c <xTaskResumeAll>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f af7c 	bne.w	8003502 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <xQueueGenericSend+0x1f8>)
 800360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	e772      	b.n	8003502 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800361c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800361e:	f000 fb3f 	bl	8003ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003622:	f000 ff03 	bl	800442c <xTaskResumeAll>
 8003626:	e76c      	b.n	8003502 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362a:	f000 fb39 	bl	8003ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362e:	f000 fefd 	bl	800442c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003634:	4618      	mov	r0, r3
 8003636:	3738      	adds	r7, #56	; 0x38
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b090      	sub	sp, #64	; 0x40
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <xQueueGenericSendFromISR+0x3c>
 8003674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <xQueueGenericSendFromISR+0x40>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <xQueueGenericSendFromISR+0x42>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d103      	bne.n	80036aa <xQueueGenericSendFromISR+0x6a>
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <xQueueGenericSendFromISR+0x6e>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericSendFromISR+0x70>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ca:	f002 f9c5 	bl	8005a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ce:	f3ef 8211 	mrs	r2, BASEPRI
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	61fa      	str	r2, [r7, #28]
 80036e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <xQueueGenericSendFromISR+0xbc>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d12f      	bne.n	800375c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003712:	f000 fa35 	bl	8003b80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003716:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800371e:	d112      	bne.n	8003746 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	d016      	beq.n	8003756 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f899 	bl	8004864 <xTaskRemoveFromEventList>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e007      	b.n	8003756 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003746:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800374a:	3301      	adds	r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	b25a      	sxtb	r2, r3
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003756:	2301      	movs	r3, #1
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800375a:	e001      	b.n	8003760 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800375c:	2300      	movs	r3, #0
 800375e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800376a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800376e:	4618      	mov	r0, r3
 8003770:	3740      	adds	r7, #64	; 0x40
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <xQueueReceive+0x30>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	623b      	str	r3, [r7, #32]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <xQueueReceive+0x3e>
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <xQueueReceive+0x42>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <xQueueReceive+0x44>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xQueueReceive+0x5e>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	61fb      	str	r3, [r7, #28]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037d6:	f001 fa07 	bl	8004be8 <xTaskGetSchedulerState>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <xQueueReceive+0x6e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <xQueueReceive+0x72>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <xQueueReceive+0x74>
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <xQueueReceive+0x8e>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	61bb      	str	r3, [r7, #24]
}
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003806:	f002 f845 	bl	8005894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01f      	beq.n	8003856 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381a:	f000 fa1b 	bl	8003c54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	1e5a      	subs	r2, r3, #1
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00f      	beq.n	800384e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	3310      	adds	r3, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f816 	bl	8004864 <xTaskRemoveFromEventList>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <xQueueReceive+0x1bc>)
 8003840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800384e:	f002 f851 	bl	80058f4 <vPortExitCritical>
				return pdPASS;
 8003852:	2301      	movs	r3, #1
 8003854:	e069      	b.n	800392a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d103      	bne.n	8003864 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800385c:	f002 f84a 	bl	80058f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003860:	2300      	movs	r3, #0
 8003862:	e062      	b.n	800392a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f85c 	bl	800492c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003878:	f002 f83c 	bl	80058f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800387c:	f000 fdc8 	bl	8004410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003880:	f002 f808 	bl	8005894 <vPortEnterCritical>
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800388a:	b25b      	sxtb	r3, r3
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003890:	d103      	bne.n	800389a <xQueueReceive+0x122>
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a6:	d103      	bne.n	80038b0 <xQueueReceive+0x138>
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b0:	f002 f820 	bl	80058f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038b4:	1d3a      	adds	r2, r7, #4
 80038b6:	f107 0310 	add.w	r3, r7, #16
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f84b 	bl	8004958 <xTaskCheckForTimeOut>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d123      	bne.n	8003910 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ca:	f000 fa3b 	bl	8003d44 <prvIsQueueEmpty>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d017      	beq.n	8003904 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	3324      	adds	r3, #36	; 0x24
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ff71 	bl	80047c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e4:	f000 f9dc 	bl	8003ca0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038e8:	f000 fda0 	bl	800442c <xTaskResumeAll>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d189      	bne.n	8003806 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <xQueueReceive+0x1bc>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	e780      	b.n	8003806 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003906:	f000 f9cb 	bl	8003ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800390a:	f000 fd8f 	bl	800442c <xTaskResumeAll>
 800390e:	e77a      	b.n	8003806 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003912:	f000 f9c5 	bl	8003ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003916:	f000 fd89 	bl	800442c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800391a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800391c:	f000 fa12 	bl	8003d44 <prvIsQueueEmpty>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	f43f af6f 	beq.w	8003806 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800392a:	4618      	mov	r0, r3
 800392c:	3730      	adds	r7, #48	; 0x30
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08e      	sub	sp, #56	; 0x38
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800394a:	2300      	movs	r3, #0
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	623b      	str	r3, [r7, #32]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	61fb      	str	r3, [r7, #28]
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003988:	f001 f92e 	bl	8004be8 <xTaskGetSchedulerState>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <xQueueSemaphoreTake+0x60>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <xQueueSemaphoreTake+0x64>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <xQueueSemaphoreTake+0x66>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	61bb      	str	r3, [r7, #24]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039b8:	f001 ff6c 	bl	8005894 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d024      	beq.n	8003a12 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80039d8:	f001 fa7c 	bl	8004ed4 <pvTaskIncrementMutexHeldCount>
 80039dc:	4602      	mov	r2, r0
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00f      	beq.n	8003a0a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	3310      	adds	r3, #16
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 ff38 	bl	8004864 <xTaskRemoveFromEventList>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039fa:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <xQueueSemaphoreTake+0x214>)
 80039fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a0a:	f001 ff73 	bl	80058f4 <vPortExitCritical>
				return pdPASS;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e097      	b.n	8003b42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	617b      	str	r3, [r7, #20]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a34:	f001 ff5e 	bl	80058f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e082      	b.n	8003b42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ff70 	bl	800492c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a50:	f001 ff50 	bl	80058f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a54:	f000 fcdc 	bl	8004410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a58:	f001 ff1c 	bl	8005894 <vPortEnterCritical>
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a68:	d103      	bne.n	8003a72 <xQueueSemaphoreTake+0x13a>
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a7e:	d103      	bne.n	8003a88 <xQueueSemaphoreTake+0x150>
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a88:	f001 ff34 	bl	80058f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a8c:	463a      	mov	r2, r7
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 ff5f 	bl	8004958 <xTaskCheckForTimeOut>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d132      	bne.n	8003b06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003aa2:	f000 f94f 	bl	8003d44 <prvIsQueueEmpty>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d026      	beq.n	8003afa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ab4:	f001 feee 	bl	8005894 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 f8b1 	bl	8004c24 <xTaskPriorityInherit>
 8003ac2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ac4:	f001 ff16 	bl	80058f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	3324      	adds	r3, #36	; 0x24
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fe77 	bl	80047c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ad8:	f000 f8e2 	bl	8003ca0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003adc:	f000 fca6 	bl	800442c <xTaskResumeAll>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f47f af68 	bne.w	80039b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <xQueueSemaphoreTake+0x214>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	e75e      	b.n	80039b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003afc:	f000 f8d0 	bl	8003ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b00:	f000 fc94 	bl	800442c <xTaskResumeAll>
 8003b04:	e758      	b.n	80039b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b08:	f000 f8ca 	bl	8003ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b0c:	f000 fc8e 	bl	800442c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b12:	f000 f917 	bl	8003d44 <prvIsQueueEmpty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f43f af4d 	beq.w	80039b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003b24:	f001 feb6 	bl	8005894 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b2a:	f000 f811 	bl	8003b50 <prvGetDisinheritPriorityAfterTimeout>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 f94a 	bl	8004dd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b3c:	f001 feda 	bl	80058f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3738      	adds	r7, #56	; 0x38
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d006      	beq.n	8003b6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e001      	b.n	8003b72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b72:	68fb      	ldr	r3, [r7, #12]
	}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d14d      	bne.n	8003c42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f8a2 	bl	8004cf4 <xTaskPriorityDisinherit>
 8003bb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e043      	b.n	8003c42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d119      	bne.n	8003bf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6858      	ldr	r0, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	f002 fa91 	bl	80060f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d32b      	bcc.n	8003c42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	e026      	b.n	8003c42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68d8      	ldr	r0, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	f002 fa77 	bl	80060f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	425b      	negs	r3, r3
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	425b      	negs	r3, r3
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d105      	bne.n	8003c42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c4a:	697b      	ldr	r3, [r7, #20]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	441a      	add	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d303      	bcc.n	8003c88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68d9      	ldr	r1, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	461a      	mov	r2, r3
 8003c92:	6838      	ldr	r0, [r7, #0]
 8003c94:	f002 fa2d 	bl	80060f2 <memcpy>
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ca8:	f001 fdf4 	bl	8005894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cb4:	e011      	b.n	8003cda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d012      	beq.n	8003ce4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fdce 	bl	8004864 <xTaskRemoveFromEventList>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cce:	f000 fea5 	bl	8004a1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	dce9      	bgt.n	8003cb6 <prvUnlockQueue+0x16>
 8003ce2:	e000      	b.n	8003ce6 <prvUnlockQueue+0x46>
					break;
 8003ce4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cee:	f001 fe01 	bl	80058f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cf2:	f001 fdcf 	bl	8005894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cfe:	e011      	b.n	8003d24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fda9 	bl	8004864 <xTaskRemoveFromEventList>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d18:	f000 fe80 	bl	8004a1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dce9      	bgt.n	8003d00 <prvUnlockQueue+0x60>
 8003d2c:	e000      	b.n	8003d30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d38:	f001 fddc 	bl	80058f4 <vPortExitCritical>
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d4c:	f001 fda2 	bl	8005894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e001      	b.n	8003d62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d62:	f001 fdc7 	bl	80058f4 <vPortExitCritical>

	return xReturn;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d78:	f001 fd8c 	bl	8005894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d102      	bne.n	8003d8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e001      	b.n	8003d92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d92:	f001 fdaf 	bl	80058f4 <vPortExitCritical>

	return xReturn;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e014      	b.n	8003dda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <vQueueAddToRegistry+0x50>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dbc:	490c      	ldr	r1, [pc, #48]	; (8003df0 <vQueueAddToRegistry+0x50>)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <vQueueAddToRegistry+0x50>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dd2:	e006      	b.n	8003de2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	d9e7      	bls.n	8003db0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	200008e0 	.word	0x200008e0

08003df4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e04:	f001 fd46 	bl	8005894 <vPortEnterCritical>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e0e:	b25b      	sxtb	r3, r3
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e14:	d103      	bne.n	8003e1e <vQueueWaitForMessageRestricted+0x2a>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e24:	b25b      	sxtb	r3, r3
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2a:	d103      	bne.n	8003e34 <vQueueWaitForMessageRestricted+0x40>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e34:	f001 fd5e 	bl	80058f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3324      	adds	r3, #36	; 0x24
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fcdf 	bl	800480c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e4e:	6978      	ldr	r0, [r7, #20]
 8003e50:	f7ff ff26 	bl	8003ca0 <prvUnlockQueue>
	}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08e      	sub	sp, #56	; 0x38
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	623b      	str	r3, [r7, #32]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61fb      	str	r3, [r7, #28]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ea2:	23bc      	movs	r3, #188	; 0xbc
 8003ea4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2bbc      	cmp	r3, #188	; 0xbc
 8003eaa:	d00a      	beq.n	8003ec2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	61bb      	str	r3, [r7, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ec2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01e      	beq.n	8003f08 <xTaskCreateStatic+0xac>
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	9302      	str	r3, [sp, #8]
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f850 	bl	8003fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f02:	f000 f8f3 	bl	80040ec <prvAddNewTaskToReadyList>
 8003f06:	e001      	b.n	8003f0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f0c:	697b      	ldr	r3, [r7, #20]
	}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b08c      	sub	sp, #48	; 0x30
 8003f1a:	af04      	add	r7, sp, #16
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fdd4 	bl	8005ad8 <pvPortMalloc>
 8003f30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f38:	20bc      	movs	r0, #188	; 0xbc
 8003f3a:	f001 fdcd 	bl	8005ad8 <pvPortMalloc>
 8003f3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4c:	e005      	b.n	8003f5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f001 fe8e 	bl	8005c70 <vPortFree>
 8003f54:	e001      	b.n	8003f5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f80e 	bl	8003fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f84:	69f8      	ldr	r0, [r7, #28]
 8003f86:	f000 f8b1 	bl	80040ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e002      	b.n	8003f96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f96:	69bb      	ldr	r3, [r7, #24]
	}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	21a5      	movs	r1, #165	; 0xa5
 8003fba:	f002 f8a8 	bl	800610e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f023 0307 	bic.w	r3, r3, #7
 8003fd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	617b      	str	r3, [r7, #20]
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01f      	beq.n	800403e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e012      	b.n	800402a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	7819      	ldrb	r1, [r3, #0]
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	3334      	adds	r3, #52	; 0x34
 8004014:	460a      	mov	r2, r1
 8004016:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d9e9      	bls.n	8004004 <prvInitialiseNewTask+0x64>
 8004030:	e000      	b.n	8004034 <prvInitialiseNewTask+0x94>
			{
				break;
 8004032:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800403c:	e003      	b.n	8004046 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	2b37      	cmp	r3, #55	; 0x37
 800404a:	d901      	bls.n	8004050 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800404c:	2337      	movs	r3, #55	; 0x37
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	2200      	movs	r2, #0
 8004060:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe ffe8 	bl	800303c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	3318      	adds	r3, #24
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe ffe3 	bl	800303c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	2200      	movs	r2, #0
 8004098:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	3354      	adds	r3, #84	; 0x54
 80040a0:	2260      	movs	r2, #96	; 0x60
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f002 f832 	bl	800610e <memset>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <prvInitialiseNewTask+0x140>)
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <prvInitialiseNewTask+0x144>)
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <prvInitialiseNewTask+0x148>)
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	69b8      	ldr	r0, [r7, #24]
 80040c2:	f001 fabd 	bl	8005640 <pxPortInitialiseStack>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	0800768c 	.word	0x0800768c
 80040e4:	080076ac 	.word	0x080076ac
 80040e8:	0800766c 	.word	0x0800766c

080040ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040f4:	f001 fbce 	bl	8005894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <prvAddNewTaskToReadyList+0xc4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <prvAddNewTaskToReadyList+0xc4>)
 8004100:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <prvAddNewTaskToReadyList+0xc8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800410a:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <prvAddNewTaskToReadyList+0xc8>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004110:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <prvAddNewTaskToReadyList+0xc4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d110      	bne.n	800413a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004118:	f000 fca4 	bl	8004a64 <prvInitialiseTaskLists>
 800411c:	e00d      	b.n	800413a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <prvAddNewTaskToReadyList+0xcc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <prvAddNewTaskToReadyList+0xc8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	429a      	cmp	r2, r3
 8004132:	d802      	bhi.n	800413a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <prvAddNewTaskToReadyList+0xc8>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <prvAddNewTaskToReadyList+0xd0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3301      	adds	r3, #1
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <prvAddNewTaskToReadyList+0xd0>)
 8004142:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <prvAddNewTaskToReadyList+0xd0>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <prvAddNewTaskToReadyList+0xd4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <prvAddNewTaskToReadyList+0x74>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <prvAddNewTaskToReadyList+0xd4>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <prvAddNewTaskToReadyList+0xd8>)
 800416e:	441a      	add	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7fe ff6d 	bl	8003056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800417c:	f001 fbba 	bl	80058f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004180:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <prvAddNewTaskToReadyList+0xcc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <prvAddNewTaskToReadyList+0xc8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	429a      	cmp	r2, r3
 8004194:	d207      	bcs.n	80041a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <prvAddNewTaskToReadyList+0xdc>)
 8004198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000df4 	.word	0x20000df4
 80041b4:	20000920 	.word	0x20000920
 80041b8:	20000e00 	.word	0x20000e00
 80041bc:	20000e10 	.word	0x20000e10
 80041c0:	20000dfc 	.word	0x20000dfc
 80041c4:	20000924 	.word	0x20000924
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	617b      	str	r3, [r7, #20]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <vTaskDelayUntil+0x46>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	613b      	str	r3, [r7, #16]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <vTaskDelayUntil+0xf0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <vTaskDelayUntil+0x64>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004230:	f000 f8ee 	bl	8004410 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <vTaskDelayUntil+0xf4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4413      	add	r3, r2
 8004242:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20b      	bcs.n	8004266 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	429a      	cmp	r2, r3
 8004256:	d211      	bcs.n	800427c <vTaskDelayUntil+0xb0>
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	429a      	cmp	r2, r3
 800425e:	d90d      	bls.n	800427c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	e00a      	b.n	800427c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	d303      	bcc.n	8004278 <vTaskDelayUntil+0xac>
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	429a      	cmp	r2, r3
 8004276:	d901      	bls.n	800427c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d006      	beq.n	8004296 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fe33 	bl	8004efc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004296:	f000 f8c9 	bl	800442c <xTaskResumeAll>
 800429a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <vTaskDelayUntil+0xf8>)
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042b2:	bf00      	nop
 80042b4:	3728      	adds	r7, #40	; 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000e1c 	.word	0x20000e1c
 80042c0:	20000df8 	.word	0x20000df8
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <vTaskDelay+0x60>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <vTaskDelay+0x30>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60bb      	str	r3, [r7, #8]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042f8:	f000 f88a 	bl	8004410 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042fc:	2100      	movs	r1, #0
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fdfc 	bl	8004efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004304:	f000 f892 	bl	800442c <xTaskResumeAll>
 8004308:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <vTaskDelay+0x64>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000e1c 	.word	0x20000e1c
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800433e:	463a      	mov	r2, r7
 8004340:	1d39      	adds	r1, r7, #4
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fe24 	bl	8002f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	9202      	str	r2, [sp, #8]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	2300      	movs	r3, #0
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	460a      	mov	r2, r1
 800435e:	4924      	ldr	r1, [pc, #144]	; (80043f0 <vTaskStartScheduler+0xc0>)
 8004360:	4824      	ldr	r0, [pc, #144]	; (80043f4 <vTaskStartScheduler+0xc4>)
 8004362:	f7ff fd7b 	bl	8003e5c <xTaskCreateStatic>
 8004366:	4603      	mov	r3, r0
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <vTaskStartScheduler+0xc8>)
 800436a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800436c:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <vTaskStartScheduler+0xc8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e001      	b.n	800437e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d102      	bne.n	800438a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004384:	f000 fe0e 	bl	8004fa4 <xTimerCreateTimerTask>
 8004388:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d11b      	bne.n	80043c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
}
 80043a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <vTaskStartScheduler+0xcc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3354      	adds	r3, #84	; 0x54
 80043aa:	4a15      	ldr	r2, [pc, #84]	; (8004400 <vTaskStartScheduler+0xd0>)
 80043ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043ae:	4b15      	ldr	r3, [pc, #84]	; (8004404 <vTaskStartScheduler+0xd4>)
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <vTaskStartScheduler+0xd8>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <vTaskStartScheduler+0xdc>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043c2:	f001 f9c5 	bl	8005750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043c6:	e00e      	b.n	80043e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ce:	d10a      	bne.n	80043e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60fb      	str	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <vTaskStartScheduler+0xb4>
}
 80043e6:	bf00      	nop
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	08007588 	.word	0x08007588
 80043f4:	08004a35 	.word	0x08004a35
 80043f8:	20000e18 	.word	0x20000e18
 80043fc:	20000920 	.word	0x20000920
 8004400:	20000010 	.word	0x20000010
 8004404:	20000e14 	.word	0x20000e14
 8004408:	20000e00 	.word	0x20000e00
 800440c:	20000df8 	.word	0x20000df8

08004410 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <vTaskSuspendAll+0x18>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	4a03      	ldr	r2, [pc, #12]	; (8004428 <vTaskSuspendAll+0x18>)
 800441c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800441e:	bf00      	nop
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20000e1c 	.word	0x20000e1c

0800442c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800443a:	4b42      	ldr	r3, [pc, #264]	; (8004544 <xTaskResumeAll+0x118>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <xTaskResumeAll+0x2c>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	603b      	str	r3, [r7, #0]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004458:	f001 fa1c 	bl	8005894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800445c:	4b39      	ldr	r3, [pc, #228]	; (8004544 <xTaskResumeAll+0x118>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3b01      	subs	r3, #1
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <xTaskResumeAll+0x118>)
 8004464:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <xTaskResumeAll+0x118>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d162      	bne.n	8004534 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <xTaskResumeAll+0x11c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d05e      	beq.n	8004534 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004476:	e02f      	b.n	80044d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	4b34      	ldr	r3, [pc, #208]	; (800454c <xTaskResumeAll+0x120>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3318      	adds	r3, #24
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fe43 	bl	8003110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fe3e 	bl	8003110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <xTaskResumeAll+0x124>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d903      	bls.n	80044a8 <xTaskResumeAll+0x7c>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <xTaskResumeAll+0x124>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <xTaskResumeAll+0x128>)
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe fdc9 	bl	8003056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <xTaskResumeAll+0x12c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <xTaskResumeAll+0x130>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044d8:	4b1c      	ldr	r3, [pc, #112]	; (800454c <xTaskResumeAll+0x120>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1cb      	bne.n	8004478 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044e6:	f000 fb5f 	bl	8004ba8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <xTaskResumeAll+0x134>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044f6:	f000 f847 	bl	8004588 <xTaskIncrementTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <xTaskResumeAll+0x130>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3b01      	subs	r3, #1
 800450a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f1      	bne.n	80044f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <xTaskResumeAll+0x134>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <xTaskResumeAll+0x130>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <xTaskResumeAll+0x138>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004534:	f001 f9de 	bl	80058f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004538:	68bb      	ldr	r3, [r7, #8]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000e1c 	.word	0x20000e1c
 8004548:	20000df4 	.word	0x20000df4
 800454c:	20000db4 	.word	0x20000db4
 8004550:	20000dfc 	.word	0x20000dfc
 8004554:	20000924 	.word	0x20000924
 8004558:	20000920 	.word	0x20000920
 800455c:	20000e08 	.word	0x20000e08
 8004560:	20000e04 	.word	0x20000e04
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <xTaskGetTickCount+0x1c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004574:	687b      	ldr	r3, [r7, #4]
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000df8 	.word	0x20000df8

08004588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004592:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <xTaskIncrementTick+0x148>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 808f 	bne.w	80046ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <xTaskIncrementTick+0x14c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045a4:	4a4b      	ldr	r2, [pc, #300]	; (80046d4 <xTaskIncrementTick+0x14c>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d120      	bne.n	80045f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045b0:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <xTaskIncrementTick+0x150>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <xTaskIncrementTick+0x46>
 80045d0:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <xTaskIncrementTick+0x150>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	4b41      	ldr	r3, [pc, #260]	; (80046dc <xTaskIncrementTick+0x154>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <xTaskIncrementTick+0x150>)
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4a3f      	ldr	r2, [pc, #252]	; (80046dc <xTaskIncrementTick+0x154>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <xTaskIncrementTick+0x158>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <xTaskIncrementTick+0x158>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	f000 fadb 	bl	8004ba8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045f2:	4b3c      	ldr	r3, [pc, #240]	; (80046e4 <xTaskIncrementTick+0x15c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d349      	bcc.n	8004690 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <xTaskIncrementTick+0x150>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004606:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <xTaskIncrementTick+0x15c>)
 8004608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800460c:	601a      	str	r2, [r3, #0]
					break;
 800460e:	e03f      	b.n	8004690 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <xTaskIncrementTick+0x150>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d203      	bcs.n	8004630 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004628:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <xTaskIncrementTick+0x15c>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800462e:	e02f      	b.n	8004690 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3304      	adds	r3, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fd6b 	bl	8003110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3318      	adds	r3, #24
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fd62 	bl	8003110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <xTaskIncrementTick+0x160>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d903      	bls.n	8004660 <xTaskIncrementTick+0xd8>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <xTaskIncrementTick+0x160>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <xTaskIncrementTick+0x164>)
 800466e:	441a      	add	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fe fced 	bl	8003056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <xTaskIncrementTick+0x168>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d3b8      	bcc.n	80045fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468e:	e7b5      	b.n	80045fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004690:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <xTaskIncrementTick+0x168>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	4915      	ldr	r1, [pc, #84]	; (80046ec <xTaskIncrementTick+0x164>)
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d901      	bls.n	80046ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <xTaskIncrementTick+0x16c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e004      	b.n	80046c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTaskIncrementTick+0x170>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <xTaskIncrementTick+0x170>)
 80046c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046c4:	697b      	ldr	r3, [r7, #20]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000e1c 	.word	0x20000e1c
 80046d4:	20000df8 	.word	0x20000df8
 80046d8:	20000dac 	.word	0x20000dac
 80046dc:	20000db0 	.word	0x20000db0
 80046e0:	20000e0c 	.word	0x20000e0c
 80046e4:	20000e14 	.word	0x20000e14
 80046e8:	20000dfc 	.word	0x20000dfc
 80046ec:	20000924 	.word	0x20000924
 80046f0:	20000920 	.word	0x20000920
 80046f4:	20000e08 	.word	0x20000e08
 80046f8:	20000e04 	.word	0x20000e04

080046fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004702:	4b2a      	ldr	r3, [pc, #168]	; (80047ac <vTaskSwitchContext+0xb0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800470a:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <vTaskSwitchContext+0xb4>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004710:	e046      	b.n	80047a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004712:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <vTaskSwitchContext+0xb4>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004718:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <vTaskSwitchContext+0xb8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e010      	b.n	8004742 <vTaskSwitchContext+0x46>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <vTaskSwitchContext+0x40>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	607b      	str	r3, [r7, #4]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vTaskSwitchContext+0x3e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3b01      	subs	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	491d      	ldr	r1, [pc, #116]	; (80047b8 <vTaskSwitchContext+0xbc>)
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0e4      	beq.n	8004720 <vTaskSwitchContext+0x24>
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <vTaskSwitchContext+0xbc>)
 8004762:	4413      	add	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	3308      	adds	r3, #8
 8004778:	429a      	cmp	r2, r3
 800477a:	d104      	bne.n	8004786 <vTaskSwitchContext+0x8a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <vTaskSwitchContext+0xc0>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <vTaskSwitchContext+0xb8>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <vTaskSwitchContext+0xc0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3354      	adds	r3, #84	; 0x54
 800479c:	4a08      	ldr	r2, [pc, #32]	; (80047c0 <vTaskSwitchContext+0xc4>)
 800479e:	6013      	str	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20000e1c 	.word	0x20000e1c
 80047b0:	20000e08 	.word	0x20000e08
 80047b4:	20000dfc 	.word	0x20000dfc
 80047b8:	20000924 	.word	0x20000924
 80047bc:	20000920 	.word	0x20000920
 80047c0:	20000010 	.word	0x20000010

080047c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <vTaskPlaceOnEventList+0x44>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe fc53 	bl	800309e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047f8:	2101      	movs	r1, #1
 80047fa:	6838      	ldr	r0, [r7, #0]
 80047fc:	f000 fb7e 	bl	8004efc <prvAddCurrentTaskToDelayedList>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000920 	.word	0x20000920

0800480c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	617b      	str	r3, [r7, #20]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <vTaskPlaceOnEventListRestricted+0x54>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3318      	adds	r3, #24
 800483a:	4619      	mov	r1, r3
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7fe fc0a 	bl	8003056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800484c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	68b8      	ldr	r0, [r7, #8]
 8004852:	f000 fb53 	bl	8004efc <prvAddCurrentTaskToDelayedList>
	}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000920 	.word	0x20000920

08004864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	60fb      	str	r3, [r7, #12]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3318      	adds	r3, #24
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fc3b 	bl	8003110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489a:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <xTaskRemoveFromEventList+0xb0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11d      	bne.n	80048de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fc32 	bl	8003110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <xTaskRemoveFromEventList+0xb4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d903      	bls.n	80048c0 <xTaskRemoveFromEventList+0x5c>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	4a16      	ldr	r2, [pc, #88]	; (8004918 <xTaskRemoveFromEventList+0xb4>)
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4a13      	ldr	r2, [pc, #76]	; (800491c <xTaskRemoveFromEventList+0xb8>)
 80048ce:	441a      	add	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f7fe fbbd 	bl	8003056 <vListInsertEnd>
 80048dc:	e005      	b.n	80048ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	3318      	adds	r3, #24
 80048e2:	4619      	mov	r1, r3
 80048e4:	480e      	ldr	r0, [pc, #56]	; (8004920 <xTaskRemoveFromEventList+0xbc>)
 80048e6:	f7fe fbb6 	bl	8003056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <xTaskRemoveFromEventList+0xc0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d905      	bls.n	8004904 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <xTaskRemoveFromEventList+0xc4>)
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e001      	b.n	8004908 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004908:	697b      	ldr	r3, [r7, #20]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000e1c 	.word	0x20000e1c
 8004918:	20000dfc 	.word	0x20000dfc
 800491c:	20000924 	.word	0x20000924
 8004920:	20000db4 	.word	0x20000db4
 8004924:	20000920 	.word	0x20000920
 8004928:	20000e08 	.word	0x20000e08

0800492c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <vTaskInternalSetTimeOutState+0x24>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <vTaskInternalSetTimeOutState+0x28>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	605a      	str	r2, [r3, #4]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000e0c 	.word	0x20000e0c
 8004954:	20000df8 	.word	0x20000df8

08004958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	613b      	str	r3, [r7, #16]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60fb      	str	r3, [r7, #12]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800499a:	f000 ff7b 	bl	8005894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <xTaskCheckForTimeOut+0xbc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b6:	d102      	bne.n	80049be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	e023      	b.n	8004a06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <xTaskCheckForTimeOut+0xc0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d007      	beq.n	80049da <xTaskCheckForTimeOut+0x82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	e015      	b.n	8004a06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d20b      	bcs.n	80049fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff9b 	bl	800492c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e004      	b.n	8004a06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a06:	f000 ff75 	bl	80058f4 <vPortExitCritical>

	return xReturn;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000df8 	.word	0x20000df8
 8004a18:	20000e0c 	.word	0x20000e0c

08004a1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <vTaskMissedYield+0x14>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000e08 	.word	0x20000e08

08004a34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a3c:	f000 f852 	bl	8004ae4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <prvIdleTask+0x28>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d9f9      	bls.n	8004a3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <prvIdleTask+0x2c>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a58:	e7f0      	b.n	8004a3c <prvIdleTask+0x8>
 8004a5a:	bf00      	nop
 8004a5c:	20000924 	.word	0x20000924
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e00c      	b.n	8004a8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <prvInitialiseTaskLists+0x60>)
 8004a7c:	4413      	add	r3, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fabc 	bl	8002ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3301      	adds	r3, #1
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b37      	cmp	r3, #55	; 0x37
 8004a8e:	d9ef      	bls.n	8004a70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a90:	480d      	ldr	r0, [pc, #52]	; (8004ac8 <prvInitialiseTaskLists+0x64>)
 8004a92:	f7fe fab3 	bl	8002ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a96:	480d      	ldr	r0, [pc, #52]	; (8004acc <prvInitialiseTaskLists+0x68>)
 8004a98:	f7fe fab0 	bl	8002ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a9c:	480c      	ldr	r0, [pc, #48]	; (8004ad0 <prvInitialiseTaskLists+0x6c>)
 8004a9e:	f7fe faad 	bl	8002ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aa2:	480c      	ldr	r0, [pc, #48]	; (8004ad4 <prvInitialiseTaskLists+0x70>)
 8004aa4:	f7fe faaa 	bl	8002ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004aa8:	480b      	ldr	r0, [pc, #44]	; (8004ad8 <prvInitialiseTaskLists+0x74>)
 8004aaa:	f7fe faa7 	bl	8002ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <prvInitialiseTaskLists+0x78>)
 8004ab0:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <prvInitialiseTaskLists+0x64>)
 8004ab2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <prvInitialiseTaskLists+0x7c>)
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <prvInitialiseTaskLists+0x68>)
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000924 	.word	0x20000924
 8004ac8:	20000d84 	.word	0x20000d84
 8004acc:	20000d98 	.word	0x20000d98
 8004ad0:	20000db4 	.word	0x20000db4
 8004ad4:	20000dc8 	.word	0x20000dc8
 8004ad8:	20000de0 	.word	0x20000de0
 8004adc:	20000dac 	.word	0x20000dac
 8004ae0:	20000db0 	.word	0x20000db0

08004ae4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aea:	e019      	b.n	8004b20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004aec:	f000 fed2 	bl	8005894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <prvCheckTasksWaitingTermination+0x50>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fb07 	bl	8003110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <prvCheckTasksWaitingTermination+0x54>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	4a0b      	ldr	r2, [pc, #44]	; (8004b38 <prvCheckTasksWaitingTermination+0x54>)
 8004b0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b16:	f000 feed 	bl	80058f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f810 	bl	8004b40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <prvCheckTasksWaitingTermination+0x58>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e1      	bne.n	8004aec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000dc8 	.word	0x20000dc8
 8004b38:	20000df4 	.word	0x20000df4
 8004b3c:	20000ddc 	.word	0x20000ddc

08004b40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3354      	adds	r3, #84	; 0x54
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fc0d 	bl	800636c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d108      	bne.n	8004b6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f885 	bl	8005c70 <vPortFree>
				vPortFree( pxTCB );
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f001 f882 	bl	8005c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b6c:	e018      	b.n	8004ba0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d103      	bne.n	8004b80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 f879 	bl	8005c70 <vPortFree>
	}
 8004b7e:	e00f      	b.n	8004ba0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d00a      	beq.n	8004ba0 <prvDeleteTCB+0x60>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	60fb      	str	r3, [r7, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <prvDeleteTCB+0x5e>
	}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <prvResetNextTaskUnblockTime+0x38>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <prvResetNextTaskUnblockTime+0x3c>)
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bc0:	e008      	b.n	8004bd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <prvResetNextTaskUnblockTime+0x38>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <prvResetNextTaskUnblockTime+0x3c>)
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000dac 	.word	0x20000dac
 8004be4:	20000e14 	.word	0x20000e14

08004be8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <xTaskGetSchedulerState+0x34>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	e008      	b.n	8004c0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <xTaskGetSchedulerState+0x38>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c04:	2302      	movs	r3, #2
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	e001      	b.n	8004c0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c0e:	687b      	ldr	r3, [r7, #4]
	}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000e00 	.word	0x20000e00
 8004c20:	20000e1c 	.word	0x20000e1c

08004c24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d051      	beq.n	8004cde <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <xTaskPriorityInherit+0xc4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d241      	bcs.n	8004ccc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db06      	blt.n	8004c5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <xTaskPriorityInherit+0xc4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6959      	ldr	r1, [r3, #20]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <xTaskPriorityInherit+0xc8>)
 8004c70:	4413      	add	r3, r2
 8004c72:	4299      	cmp	r1, r3
 8004c74:	d122      	bne.n	8004cbc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fa48 	bl	8003110 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <xTaskPriorityInherit+0xc4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <xTaskPriorityInherit+0xcc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d903      	bls.n	8004c9e <xTaskPriorityInherit+0x7a>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <xTaskPriorityInherit+0xcc>)
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4a10      	ldr	r2, [pc, #64]	; (8004cec <xTaskPriorityInherit+0xc8>)
 8004cac:	441a      	add	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7fe f9ce 	bl	8003056 <vListInsertEnd>
 8004cba:	e004      	b.n	8004cc6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <xTaskPriorityInherit+0xc4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e008      	b.n	8004cde <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <xTaskPriorityInherit+0xc4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d201      	bcs.n	8004cde <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cde:	68fb      	ldr	r3, [r7, #12]
	}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000920 	.word	0x20000920
 8004cec:	20000924 	.word	0x20000924
 8004cf0:	20000dfc 	.word	0x20000dfc

08004cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d056      	beq.n	8004db8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <xTaskPriorityDisinherit+0xd0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d00a      	beq.n	8004d2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	60bb      	str	r3, [r7, #8]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4c:	1e5a      	subs	r2, r3, #1
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d02c      	beq.n	8004db8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d128      	bne.n	8004db8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe f9d0 	bl	8003110 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <xTaskPriorityDisinherit+0xd4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d903      	bls.n	8004d98 <xTaskPriorityDisinherit+0xa4>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <xTaskPriorityDisinherit+0xd4>)
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <xTaskPriorityDisinherit+0xd8>)
 8004da6:	441a      	add	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f7fe f951 	bl	8003056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db8:	697b      	ldr	r3, [r7, #20]
	}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000920 	.word	0x20000920
 8004dc8:	20000dfc 	.word	0x20000dfc
 8004dcc:	20000924 	.word	0x20000924

08004dd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d06a      	beq.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d902      	bls.n	8004e16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	e002      	b.n	8004e1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d04b      	beq.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d146      	bne.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d10a      	bne.n	8004e50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60bb      	str	r3, [r7, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	db04      	blt.n	8004e6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	6959      	ldr	r1, [r3, #20]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d11c      	bne.n	8004ebe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe f941 	bl	8003110 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d903      	bls.n	8004ea2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004eb0:	441a      	add	r2, r3
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fe f8cc 	bl	8003056 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ebe:	bf00      	nop
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000920 	.word	0x20000920
 8004ecc:	20000924 	.word	0x20000924
 8004ed0:	20000dfc 	.word	0x20000dfc

08004ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee6:	3201      	adds	r2, #1
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004eea:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004eec:	681b      	ldr	r3, [r3, #0]
	}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	20000920 	.word	0x20000920

08004efc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <prvAddCurrentTaskToDelayedList+0x90>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f0c:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe f8fc 	bl	8003110 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1e:	d10a      	bne.n	8004f36 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4819      	ldr	r0, [pc, #100]	; (8004f94 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f30:	f7fe f891 	bl	8003056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f34:	e026      	b.n	8004f84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f3e:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d209      	bcs.n	8004f62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe f89f 	bl	800309e <vListInsert>
}
 8004f60:	e010      	b.n	8004f84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7fe f895 	bl	800309e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d202      	bcs.n	8004f84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6013      	str	r3, [r2, #0]
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000df8 	.word	0x20000df8
 8004f90:	20000920 	.word	0x20000920
 8004f94:	20000de0 	.word	0x20000de0
 8004f98:	20000db0 	.word	0x20000db0
 8004f9c:	20000dac 	.word	0x20000dac
 8004fa0:	20000e14 	.word	0x20000e14

08004fa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fae:	f000 fb07 	bl	80055c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <xTimerCreateTimerTask+0x80>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d021      	beq.n	8004ffe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fc2:	1d3a      	adds	r2, r7, #4
 8004fc4:	f107 0108 	add.w	r1, r7, #8
 8004fc8:	f107 030c 	add.w	r3, r7, #12
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd fffb 	bl	8002fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	9202      	str	r2, [sp, #8]
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	4910      	ldr	r1, [pc, #64]	; (8005028 <xTimerCreateTimerTask+0x84>)
 8004fe6:	4811      	ldr	r0, [pc, #68]	; (800502c <xTimerCreateTimerTask+0x88>)
 8004fe8:	f7fe ff38 	bl	8003e5c <xTaskCreateStatic>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4a10      	ldr	r2, [pc, #64]	; (8005030 <xTimerCreateTimerTask+0x8c>)
 8004ff0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <xTimerCreateTimerTask+0x8c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	613b      	str	r3, [r7, #16]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800501a:	697b      	ldr	r3, [r7, #20]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000e50 	.word	0x20000e50
 8005028:	08007590 	.word	0x08007590
 800502c:	08005169 	.word	0x08005169
 8005030:	20000e54 	.word	0x20000e54

08005034 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <xTimerGenericCommand+0x2e>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	623b      	str	r3, [r7, #32]
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <xTimerGenericCommand+0x98>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d02a      	beq.n	80050c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b05      	cmp	r3, #5
 800507a:	dc18      	bgt.n	80050ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800507c:	f7ff fdb4 	bl	8004be8 <xTaskGetSchedulerState>
 8005080:	4603      	mov	r3, r0
 8005082:	2b02      	cmp	r3, #2
 8005084:	d109      	bne.n	800509a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <xTimerGenericCommand+0x98>)
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f107 0110 	add.w	r1, r7, #16
 800508e:	2300      	movs	r3, #0
 8005090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005092:	f7fe f9d7 	bl	8003444 <xQueueGenericSend>
 8005096:	6278      	str	r0, [r7, #36]	; 0x24
 8005098:	e012      	b.n	80050c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <xTimerGenericCommand+0x98>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f107 0110 	add.w	r1, r7, #16
 80050a2:	2300      	movs	r3, #0
 80050a4:	2200      	movs	r2, #0
 80050a6:	f7fe f9cd 	bl	8003444 <xQueueGenericSend>
 80050aa:	6278      	str	r0, [r7, #36]	; 0x24
 80050ac:	e008      	b.n	80050c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <xTimerGenericCommand+0x98>)
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	f107 0110 	add.w	r1, r7, #16
 80050b6:	2300      	movs	r3, #0
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	f7fe fac1 	bl	8003640 <xQueueGenericSendFromISR>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3728      	adds	r7, #40	; 0x28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000e50 	.word	0x20000e50

080050d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <prvProcessExpiredTimer+0x94>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe f811 	bl	8003110 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d022      	beq.n	8005142 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	18d1      	adds	r1, r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f000 f8d1 	bl	80052b0 <prvInsertTimerInActiveList>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01f      	beq.n	8005154 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	2100      	movs	r1, #0
 800511e:	6978      	ldr	r0, [r7, #20]
 8005120:	f7ff ff88 	bl	8005034 <xTimerGenericCommand>
 8005124:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	b2da      	uxtb	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	6978      	ldr	r0, [r7, #20]
 800515a:	4798      	blx	r3
}
 800515c:	bf00      	nop
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000e48 	.word	0x20000e48

08005168 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005170:	f107 0308 	add.w	r3, r7, #8
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f857 	bl	8005228 <prvGetNextExpireTime>
 800517a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f803 	bl	800518c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005186:	f000 f8d5 	bl	8005334 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800518a:	e7f1      	b.n	8005170 <prvTimerTask+0x8>

0800518c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005196:	f7ff f93b 	bl	8004410 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f866 	bl	8005270 <prvSampleTimeNow>
 80051a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d130      	bne.n	800520e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <prvProcessTimerOrBlockTask+0x3c>
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d806      	bhi.n	80051c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051ba:	f7ff f937 	bl	800442c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff ff85 	bl	80050d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051c6:	e024      	b.n	8005212 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <prvProcessTimerOrBlockTask+0x90>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <prvProcessTimerOrBlockTask+0x50>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <prvProcessTimerOrBlockTask+0x52>
 80051dc:	2300      	movs	r3, #0
 80051de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051e0:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <prvProcessTimerOrBlockTask+0x94>)
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	f7fe fe01 	bl	8003df4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051f2:	f7ff f91b 	bl	800442c <xTaskResumeAll>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvProcessTimerOrBlockTask+0x98>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	f3bf 8f6f 	isb	sy
}
 800520c:	e001      	b.n	8005212 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800520e:	f7ff f90d 	bl	800442c <xTaskResumeAll>
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000e4c 	.word	0x20000e4c
 8005220:	20000e50 	.word	0x20000e50
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005230:	4b0e      	ldr	r3, [pc, #56]	; (800526c <prvGetNextExpireTime+0x44>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <prvGetNextExpireTime+0x16>
 800523a:	2201      	movs	r2, #1
 800523c:	e000      	b.n	8005240 <prvGetNextExpireTime+0x18>
 800523e:	2200      	movs	r2, #0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800524c:	4b07      	ldr	r3, [pc, #28]	; (800526c <prvGetNextExpireTime+0x44>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e001      	b.n	800525c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000e48 	.word	0x20000e48

08005270 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005278:	f7ff f976 	bl	8004568 <xTaskGetTickCount>
 800527c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <prvSampleTimeNow+0x3c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d205      	bcs.n	8005294 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005288:	f000 f936 	bl	80054f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e002      	b.n	800529a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <prvSampleTimeNow+0x3c>)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052a0:	68fb      	ldr	r3, [r7, #12]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000e58 	.word	0x20000e58

080052b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d812      	bhi.n	80052fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e01b      	b.n	8005322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <prvInsertTimerInActiveList+0x7c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f7fd fed2 	bl	800309e <vListInsert>
 80052fa:	e012      	b.n	8005322 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d206      	bcs.n	8005312 <prvInsertTimerInActiveList+0x62>
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800530c:	2301      	movs	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e007      	b.n	8005322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <prvInsertTimerInActiveList+0x80>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3304      	adds	r3, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7fd febe 	bl	800309e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005322:	697b      	ldr	r3, [r7, #20]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000e4c 	.word	0x20000e4c
 8005330:	20000e48 	.word	0x20000e48

08005334 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	; 0x38
 8005338:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800533a:	e0ca      	b.n	80054d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	da18      	bge.n	8005374 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	3304      	adds	r3, #4
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61fb      	str	r3, [r7, #28]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536a:	6850      	ldr	r0, [r2, #4]
 800536c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536e:	6892      	ldr	r2, [r2, #8]
 8005370:	4611      	mov	r1, r2
 8005372:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f2c0 80aa 	blt.w	80054d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	3304      	adds	r3, #4
 800538c:	4618      	mov	r0, r3
 800538e:	f7fd febf 	bl	8003110 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005392:	463b      	mov	r3, r7
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff ff6b 	bl	8005270 <prvSampleTimeNow>
 800539a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b09      	cmp	r3, #9
 80053a0:	f200 8097 	bhi.w	80054d2 <prvProcessReceivedCommands+0x19e>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <prvProcessReceivedCommands+0x78>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053d5 	.word	0x080053d5
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	080053d5 	.word	0x080053d5
 80053b8:	08005449 	.word	0x08005449
 80053bc:	0800545d 	.word	0x0800545d
 80053c0:	080054a7 	.word	0x080054a7
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053d5 	.word	0x080053d5
 80053cc:	08005449 	.word	0x08005449
 80053d0:	0800545d 	.word	0x0800545d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	18d1      	adds	r1, r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f4:	f7ff ff5c 	bl	80052b0 <prvInsertTimerInActiveList>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d069      	beq.n	80054d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005404:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05e      	beq.n	80054d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	441a      	add	r2, r3
 800541c:	2300      	movs	r3, #0
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	2100      	movs	r1, #0
 8005424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005426:	f7ff fe05 	bl	8005034 <xTimerGenericCommand>
 800542a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d14f      	bne.n	80054d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	61bb      	str	r3, [r7, #24]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800545a:	e03a      	b.n	80054d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	b2da      	uxtb	r2, r3
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	617b      	str	r3, [r7, #20]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	18d1      	adds	r1, r2, r3
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a0:	f7ff ff06 	bl	80052b0 <prvInsertTimerInActiveList>
					break;
 80054a4:	e015      	b.n	80054d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80054b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b6:	f000 fbdb 	bl	8005c70 <vPortFree>
 80054ba:	e00a      	b.n	80054d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054ce:	e000      	b.n	80054d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <prvProcessReceivedCommands+0x1c0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	1d39      	adds	r1, r7, #4
 80054d8:	2200      	movs	r2, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe f94c 	bl	8003778 <xQueueReceive>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f47f af2a 	bne.w	800533c <prvProcessReceivedCommands+0x8>
	}
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3730      	adds	r7, #48	; 0x30
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000e50 	.word	0x20000e50

080054f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054fe:	e048      	b.n	8005592 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <prvSwitchTimerLists+0xc0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550a:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <prvSwitchTimerLists+0xc0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7fd fdf9 	bl	8003110 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02e      	beq.n	8005592 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d90e      	bls.n	8005564 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005552:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <prvSwitchTimerLists+0xc0>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f7fd fd9e 	bl	800309e <vListInsert>
 8005562:	e016      	b.n	8005592 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	2100      	movs	r1, #0
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fd60 	bl	8005034 <xTimerGenericCommand>
 8005574:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	603b      	str	r3, [r7, #0]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <prvSwitchTimerLists+0xc0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1b1      	bne.n	8005500 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <prvSwitchTimerLists+0xc0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <prvSwitchTimerLists+0xc4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <prvSwitchTimerLists+0xc0>)
 80055a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055aa:	4a04      	ldr	r2, [pc, #16]	; (80055bc <prvSwitchTimerLists+0xc4>)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000e48 	.word	0x20000e48
 80055bc:	20000e4c 	.word	0x20000e4c

080055c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055c6:	f000 f965 	bl	8005894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <prvCheckForValidListAndQueue+0x60>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d120      	bne.n	8005614 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055d2:	4814      	ldr	r0, [pc, #80]	; (8005624 <prvCheckForValidListAndQueue+0x64>)
 80055d4:	f7fd fd12 	bl	8002ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055d8:	4813      	ldr	r0, [pc, #76]	; (8005628 <prvCheckForValidListAndQueue+0x68>)
 80055da:	f7fd fd0f 	bl	8002ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <prvCheckForValidListAndQueue+0x6c>)
 80055e0:	4a10      	ldr	r2, [pc, #64]	; (8005624 <prvCheckForValidListAndQueue+0x64>)
 80055e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <prvCheckForValidListAndQueue+0x70>)
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <prvCheckForValidListAndQueue+0x68>)
 80055e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <prvCheckForValidListAndQueue+0x74>)
 80055f0:	4a11      	ldr	r2, [pc, #68]	; (8005638 <prvCheckForValidListAndQueue+0x78>)
 80055f2:	2110      	movs	r1, #16
 80055f4:	200a      	movs	r0, #10
 80055f6:	f7fd fe1d 	bl	8003234 <xQueueGenericCreateStatic>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4a08      	ldr	r2, [pc, #32]	; (8005620 <prvCheckForValidListAndQueue+0x60>)
 80055fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <prvCheckForValidListAndQueue+0x60>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <prvCheckForValidListAndQueue+0x60>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	490b      	ldr	r1, [pc, #44]	; (800563c <prvCheckForValidListAndQueue+0x7c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe fbc6 	bl	8003da0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005614:	f000 f96e 	bl	80058f4 <vPortExitCritical>
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000e50 	.word	0x20000e50
 8005624:	20000e20 	.word	0x20000e20
 8005628:	20000e34 	.word	0x20000e34
 800562c:	20000e48 	.word	0x20000e48
 8005630:	20000e4c 	.word	0x20000e4c
 8005634:	20000efc 	.word	0x20000efc
 8005638:	20000e5c 	.word	0x20000e5c
 800563c:	08007598 	.word	0x08007598

08005640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3b04      	subs	r3, #4
 8005650:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3b04      	subs	r3, #4
 800565e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b04      	subs	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005670:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <pxPortInitialiseStack+0x64>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3b14      	subs	r3, #20
 800567a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3b04      	subs	r3, #4
 8005686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f06f 0202 	mvn.w	r2, #2
 800568e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3b20      	subs	r3, #32
 8005694:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	080056a9 	.word	0x080056a9

080056a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <prvTaskExitError+0x54>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ba:	d00a      	beq.n	80056d2 <prvTaskExitError+0x2a>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <prvTaskExitError+0x28>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056e6:	bf00      	nop
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0fc      	beq.n	80056e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	2000000c 	.word	0x2000000c

08005700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <pxCurrentTCBConst2>)
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	f380 8809 	msr	PSP, r0
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	4770      	bx	lr
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst2>:
 8005720:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005728:	4808      	ldr	r0, [pc, #32]	; (800574c <prvPortStartFirstTask+0x24>)
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	f380 8808 	msr	MSP, r0
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8814 	msr	CONTROL, r0
 800573a:	b662      	cpsie	i
 800573c:	b661      	cpsie	f
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	df00      	svc	0
 8005748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800574a:	bf00      	nop
 800574c:	e000ed08 	.word	0xe000ed08

08005750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005756:	4b46      	ldr	r3, [pc, #280]	; (8005870 <xPortStartScheduler+0x120>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a46      	ldr	r2, [pc, #280]	; (8005874 <xPortStartScheduler+0x124>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d10a      	bne.n	8005776 <xPortStartScheduler+0x26>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	613b      	str	r3, [r7, #16]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005776:	4b3e      	ldr	r3, [pc, #248]	; (8005870 <xPortStartScheduler+0x120>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3f      	ldr	r2, [pc, #252]	; (8005878 <xPortStartScheduler+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10a      	bne.n	8005796 <xPortStartScheduler+0x46>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005796:	4b39      	ldr	r3, [pc, #228]	; (800587c <xPortStartScheduler+0x12c>)
 8005798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	4b31      	ldr	r3, [pc, #196]	; (8005880 <xPortStartScheduler+0x130>)
 80057bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <xPortStartScheduler+0x134>)
 80057c0:	2207      	movs	r2, #7
 80057c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057c4:	e009      	b.n	80057da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057c6:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <xPortStartScheduler+0x134>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4a2d      	ldr	r2, [pc, #180]	; (8005884 <xPortStartScheduler+0x134>)
 80057ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d0ef      	beq.n	80057c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057e6:	4b27      	ldr	r3, [pc, #156]	; (8005884 <xPortStartScheduler+0x134>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1c3 0307 	rsb	r3, r3, #7
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d00a      	beq.n	8005808 <xPortStartScheduler+0xb8>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60bb      	str	r3, [r7, #8]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005808:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <xPortStartScheduler+0x134>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <xPortStartScheduler+0x134>)
 8005810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <xPortStartScheduler+0x134>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800581a:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <xPortStartScheduler+0x134>)
 800581c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <xPortStartScheduler+0x138>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <xPortStartScheduler+0x138>)
 800582c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <xPortStartScheduler+0x138>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a14      	ldr	r2, [pc, #80]	; (8005888 <xPortStartScheduler+0x138>)
 8005838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800583c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800583e:	f000 f8dd 	bl	80059fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <xPortStartScheduler+0x13c>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005848:	f000 f8fc 	bl	8005a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <xPortStartScheduler+0x140>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a0f      	ldr	r2, [pc, #60]	; (8005890 <xPortStartScheduler+0x140>)
 8005852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005858:	f7ff ff66 	bl	8005728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800585c:	f7fe ff4e 	bl	80046fc <vTaskSwitchContext>
	prvTaskExitError();
 8005860:	f7ff ff22 	bl	80056a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	e000ed00 	.word	0xe000ed00
 8005874:	410fc271 	.word	0x410fc271
 8005878:	410fc270 	.word	0x410fc270
 800587c:	e000e400 	.word	0xe000e400
 8005880:	20000f4c 	.word	0x20000f4c
 8005884:	20000f50 	.word	0x20000f50
 8005888:	e000ed20 	.word	0xe000ed20
 800588c:	2000000c 	.word	0x2000000c
 8005890:	e000ef34 	.word	0xe000ef34

08005894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	607b      	str	r3, [r7, #4]
}
 80058ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <vPortEnterCritical+0x58>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	4a0d      	ldr	r2, [pc, #52]	; (80058ec <vPortEnterCritical+0x58>)
 80058b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <vPortEnterCritical+0x58>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10f      	bne.n	80058e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <vPortEnterCritical+0x5c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	603b      	str	r3, [r7, #0]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <vPortEnterCritical+0x4a>
	}
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	2000000c 	.word	0x2000000c
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <vPortExitCritical+0x50>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <vPortExitCritical+0x24>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	607b      	str	r3, [r7, #4]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <vPortExitCritical+0x50>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3b01      	subs	r3, #1
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <vPortExitCritical+0x50>)
 8005920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <vPortExitCritical+0x50>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <vPortExitCritical+0x42>
 800592a:	2300      	movs	r3, #0
 800592c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f383 8811 	msr	BASEPRI, r3
}
 8005934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2000000c 	.word	0x2000000c
	...

08005950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005950:	f3ef 8009 	mrs	r0, PSP
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <pxCurrentTCBConst>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f01e 0f10 	tst.w	lr, #16
 8005960:	bf08      	it	eq
 8005962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	6010      	str	r0, [r2, #0]
 800596c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005974:	f380 8811 	msr	BASEPRI, r0
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f7fe febc 	bl	80046fc <vTaskSwitchContext>
 8005984:	f04f 0000 	mov.w	r0, #0
 8005988:	f380 8811 	msr	BASEPRI, r0
 800598c:	bc09      	pop	{r0, r3}
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	6808      	ldr	r0, [r1, #0]
 8005992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005996:	f01e 0f10 	tst.w	lr, #16
 800599a:	bf08      	it	eq
 800599c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059a0:	f380 8809 	msr	PSP, r0
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst>:
 80059b0:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	607b      	str	r3, [r7, #4]
}
 80059d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059d2:	f7fe fdd9 	bl	8004588 <xTaskIncrementTick>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <xPortSysTickHandler+0x40>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f383 8811 	msr	BASEPRI, r3
}
 80059ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <vPortSetupTimerInterrupt+0x38>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <vPortSetupTimerInterrupt+0x3c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <vPortSetupTimerInterrupt+0x40>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <vPortSetupTimerInterrupt+0x44>)
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	e000e010 	.word	0xe000e010
 8005a34:	e000e018 	.word	0xe000e018
 8005a38:	20000000 	.word	0x20000000
 8005a3c:	10624dd3 	.word	0x10624dd3
 8005a40:	e000e014 	.word	0xe000e014

08005a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a54 <vPortEnableVFP+0x10>
 8005a48:	6801      	ldr	r1, [r0, #0]
 8005a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a4e:	6001      	str	r1, [r0, #0]
 8005a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a52:	bf00      	nop
 8005a54:	e000ed88 	.word	0xe000ed88

08005a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a5e:	f3ef 8305 	mrs	r3, IPSR
 8005a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b0f      	cmp	r3, #15
 8005a68:	d914      	bls.n	8005a94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <vPortValidateInterruptPriority+0x70>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <vPortValidateInterruptPriority+0x74>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	7afa      	ldrb	r2, [r7, #11]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d20a      	bcs.n	8005a94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a94:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <vPortValidateInterruptPriority+0x78>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <vPortValidateInterruptPriority+0x7c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d90a      	bls.n	8005aba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	603b      	str	r3, [r7, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <vPortValidateInterruptPriority+0x60>
	}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	e000e3f0 	.word	0xe000e3f0
 8005acc:	20000f4c 	.word	0x20000f4c
 8005ad0:	e000ed0c 	.word	0xe000ed0c
 8005ad4:	20000f50 	.word	0x20000f50

08005ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ae4:	f7fe fc94 	bl	8004410 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ae8:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <pvPortMalloc+0x180>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005af0:	f000 f920 	bl	8005d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005af4:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <pvPortMalloc+0x184>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 8093 	bne.w	8005c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01d      	beq.n	8005b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b08:	2208      	movs	r2, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d014      	beq.n	8005b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f023 0307 	bic.w	r3, r3, #7
 8005b20:	3308      	adds	r3, #8
 8005b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <pvPortMalloc+0x6c>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	617b      	str	r3, [r7, #20]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d06e      	beq.n	8005c28 <pvPortMalloc+0x150>
 8005b4a:	4b45      	ldr	r3, [pc, #276]	; (8005c60 <pvPortMalloc+0x188>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d869      	bhi.n	8005c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b54:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <pvPortMalloc+0x18c>)
 8005b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b58:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <pvPortMalloc+0x18c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b5e:	e004      	b.n	8005b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d903      	bls.n	8005b7c <pvPortMalloc+0xa4>
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f1      	bne.n	8005b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b7c:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <pvPortMalloc+0x180>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d050      	beq.n	8005c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d91f      	bls.n	8005be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	613b      	str	r3, [r7, #16]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	1ad2      	subs	r2, r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005be2:	69b8      	ldr	r0, [r7, #24]
 8005be4:	f000 f908 	bl	8005df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <pvPortMalloc+0x188>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <pvPortMalloc+0x188>)
 8005bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	; (8005c60 <pvPortMalloc+0x188>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <pvPortMalloc+0x190>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d203      	bcs.n	8005c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c02:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <pvPortMalloc+0x188>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <pvPortMalloc+0x190>)
 8005c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <pvPortMalloc+0x184>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c1e:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <pvPortMalloc+0x194>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <pvPortMalloc+0x194>)
 8005c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c28:	f7fe fc00 	bl	800442c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <pvPortMalloc+0x174>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60fb      	str	r3, [r7, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <pvPortMalloc+0x172>
	return pvReturn;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3728      	adds	r7, #40	; 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20004b5c 	.word	0x20004b5c
 8005c5c:	20004b70 	.word	0x20004b70
 8005c60:	20004b60 	.word	0x20004b60
 8005c64:	20004b54 	.word	0x20004b54
 8005c68:	20004b64 	.word	0x20004b64
 8005c6c:	20004b68 	.word	0x20004b68

08005c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d04d      	beq.n	8005d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c82:	2308      	movs	r3, #8
 8005c84:	425b      	negs	r3, r3
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4413      	add	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <vPortFree+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <vPortFree+0x44>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60fb      	str	r3, [r7, #12]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <vPortFree+0x62>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60bb      	str	r3, [r7, #8]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <vPortFree+0xb8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01e      	beq.n	8005d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11a      	bne.n	8005d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <vPortFree+0xb8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cf8:	f7fe fb8a 	bl	8004410 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <vPortFree+0xbc>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <vPortFree+0xbc>)
 8005d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d0a:	6938      	ldr	r0, [r7, #16]
 8005d0c:	f000 f874 	bl	8005df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <vPortFree+0xc0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	4a06      	ldr	r2, [pc, #24]	; (8005d30 <vPortFree+0xc0>)
 8005d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d1a:	f7fe fb87 	bl	800442c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20004b70 	.word	0x20004b70
 8005d2c:	20004b60 	.word	0x20004b60
 8005d30:	20004b6c 	.word	0x20004b6c

08005d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d40:	4b27      	ldr	r3, [pc, #156]	; (8005de0 <prvHeapInit+0xac>)
 8005d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3307      	adds	r3, #7
 8005d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0307 	bic.w	r3, r3, #7
 8005d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <prvHeapInit+0xac>)
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <prvHeapInit+0xb0>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <prvHeapInit+0xb0>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d80:	2208      	movs	r2, #8
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <prvHeapInit+0xb4>)
 8005d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <prvHeapInit+0xb4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <prvHeapInit+0xb4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <prvHeapInit+0xb4>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <prvHeapInit+0xb8>)
 8005dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <prvHeapInit+0xbc>)
 8005dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <prvHeapInit+0xc0>)
 8005dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000f54 	.word	0x20000f54
 8005de4:	20004b54 	.word	0x20004b54
 8005de8:	20004b5c 	.word	0x20004b5c
 8005dec:	20004b64 	.word	0x20004b64
 8005df0:	20004b60 	.word	0x20004b60
 8005df4:	20004b70 	.word	0x20004b70

08005df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e00:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <prvInsertBlockIntoFreeList+0xac>)
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e002      	b.n	8005e0c <prvInsertBlockIntoFreeList+0x14>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d8f7      	bhi.n	8005e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4413      	add	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d108      	bne.n	8005e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d118      	bne.n	8005e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d00d      	beq.n	8005e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e008      	b.n	8005e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e003      	b.n	8005e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d002      	beq.n	8005e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20004b54 	.word	0x20004b54
 8005ea8:	20004b5c 	.word	0x20004b5c

08005eac <__errno>:
 8005eac:	4b01      	ldr	r3, [pc, #4]	; (8005eb4 <__errno+0x8>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000010 	.word	0x20000010

08005eb8 <std>:
 8005eb8:	2300      	movs	r3, #0
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec6:	6083      	str	r3, [r0, #8]
 8005ec8:	8181      	strh	r1, [r0, #12]
 8005eca:	6643      	str	r3, [r0, #100]	; 0x64
 8005ecc:	81c2      	strh	r2, [r0, #14]
 8005ece:	6183      	str	r3, [r0, #24]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	305c      	adds	r0, #92	; 0x5c
 8005ed6:	f000 f91a 	bl	800610e <memset>
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <std+0x38>)
 8005edc:	6263      	str	r3, [r4, #36]	; 0x24
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <std+0x3c>)
 8005ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <std+0x40>)
 8005ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <std+0x44>)
 8005ee8:	6224      	str	r4, [r4, #32]
 8005eea:	6323      	str	r3, [r4, #48]	; 0x30
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	08006485 	.word	0x08006485
 8005ef4:	080064a7 	.word	0x080064a7
 8005ef8:	080064df 	.word	0x080064df
 8005efc:	08006503 	.word	0x08006503

08005f00 <_cleanup_r>:
 8005f00:	4901      	ldr	r1, [pc, #4]	; (8005f08 <_cleanup_r+0x8>)
 8005f02:	f000 b8af 	b.w	8006064 <_fwalk_reent>
 8005f06:	bf00      	nop
 8005f08:	080066cd 	.word	0x080066cd

08005f0c <__sfmoreglue>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	2268      	movs	r2, #104	; 0x68
 8005f10:	1e4d      	subs	r5, r1, #1
 8005f12:	4355      	muls	r5, r2
 8005f14:	460e      	mov	r6, r1
 8005f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f1a:	f000 f921 	bl	8006160 <_malloc_r>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	b140      	cbz	r0, 8005f34 <__sfmoreglue+0x28>
 8005f22:	2100      	movs	r1, #0
 8005f24:	e9c0 1600 	strd	r1, r6, [r0]
 8005f28:	300c      	adds	r0, #12
 8005f2a:	60a0      	str	r0, [r4, #8]
 8005f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f30:	f000 f8ed 	bl	800610e <memset>
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}

08005f38 <__sfp_lock_acquire>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_acquire+0x8>)
 8005f3a:	f000 b8d8 	b.w	80060ee <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20004b75 	.word	0x20004b75

08005f44 <__sfp_lock_release>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sfp_lock_release+0x8>)
 8005f46:	f000 b8d3 	b.w	80060f0 <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20004b75 	.word	0x20004b75

08005f50 <__sinit_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_acquire+0x8>)
 8005f52:	f000 b8cc 	b.w	80060ee <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	20004b76 	.word	0x20004b76

08005f5c <__sinit_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__sinit_lock_release+0x8>)
 8005f5e:	f000 b8c7 	b.w	80060f0 <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	20004b76 	.word	0x20004b76

08005f68 <__sinit>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	f7ff fff0 	bl	8005f50 <__sinit_lock_acquire>
 8005f70:	69a3      	ldr	r3, [r4, #24]
 8005f72:	b11b      	cbz	r3, 8005f7c <__sinit+0x14>
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f7ff bff0 	b.w	8005f5c <__sinit_lock_release>
 8005f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f80:	6523      	str	r3, [r4, #80]	; 0x50
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <__sinit+0x68>)
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <__sinit+0x6c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	bf04      	itt	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	61a3      	streq	r3, [r4, #24]
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 f820 	bl	8005fd8 <__sfp>
 8005f98:	6060      	str	r0, [r4, #4]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f81c 	bl	8005fd8 <__sfp>
 8005fa0:	60a0      	str	r0, [r4, #8]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f818 	bl	8005fd8 <__sfp>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60e0      	str	r0, [r4, #12]
 8005fac:	2104      	movs	r1, #4
 8005fae:	6860      	ldr	r0, [r4, #4]
 8005fb0:	f7ff ff82 	bl	8005eb8 <std>
 8005fb4:	68a0      	ldr	r0, [r4, #8]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2109      	movs	r1, #9
 8005fba:	f7ff ff7d 	bl	8005eb8 <std>
 8005fbe:	68e0      	ldr	r0, [r4, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	2112      	movs	r1, #18
 8005fc4:	f7ff ff78 	bl	8005eb8 <std>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61a3      	str	r3, [r4, #24]
 8005fcc:	e7d2      	b.n	8005f74 <__sinit+0xc>
 8005fce:	bf00      	nop
 8005fd0:	080076cc 	.word	0x080076cc
 8005fd4:	08005f01 	.word	0x08005f01

08005fd8 <__sfp>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	4607      	mov	r7, r0
 8005fdc:	f7ff ffac 	bl	8005f38 <__sfp_lock_acquire>
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <__sfp+0x84>)
 8005fe2:	681e      	ldr	r6, [r3, #0]
 8005fe4:	69b3      	ldr	r3, [r6, #24]
 8005fe6:	b913      	cbnz	r3, 8005fee <__sfp+0x16>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ffbd 	bl	8005f68 <__sinit>
 8005fee:	3648      	adds	r6, #72	; 0x48
 8005ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	d503      	bpl.n	8006000 <__sfp+0x28>
 8005ff8:	6833      	ldr	r3, [r6, #0]
 8005ffa:	b30b      	cbz	r3, 8006040 <__sfp+0x68>
 8005ffc:	6836      	ldr	r6, [r6, #0]
 8005ffe:	e7f7      	b.n	8005ff0 <__sfp+0x18>
 8006000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006004:	b9d5      	cbnz	r5, 800603c <__sfp+0x64>
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <__sfp+0x88>)
 8006008:	60e3      	str	r3, [r4, #12]
 800600a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800600e:	6665      	str	r5, [r4, #100]	; 0x64
 8006010:	f000 f86c 	bl	80060ec <__retarget_lock_init_recursive>
 8006014:	f7ff ff96 	bl	8005f44 <__sfp_lock_release>
 8006018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800601c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006020:	6025      	str	r5, [r4, #0]
 8006022:	61a5      	str	r5, [r4, #24]
 8006024:	2208      	movs	r2, #8
 8006026:	4629      	mov	r1, r5
 8006028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800602c:	f000 f86f 	bl	800610e <memset>
 8006030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006038:	4620      	mov	r0, r4
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603c:	3468      	adds	r4, #104	; 0x68
 800603e:	e7d9      	b.n	8005ff4 <__sfp+0x1c>
 8006040:	2104      	movs	r1, #4
 8006042:	4638      	mov	r0, r7
 8006044:	f7ff ff62 	bl	8005f0c <__sfmoreglue>
 8006048:	4604      	mov	r4, r0
 800604a:	6030      	str	r0, [r6, #0]
 800604c:	2800      	cmp	r0, #0
 800604e:	d1d5      	bne.n	8005ffc <__sfp+0x24>
 8006050:	f7ff ff78 	bl	8005f44 <__sfp_lock_release>
 8006054:	230c      	movs	r3, #12
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	e7ee      	b.n	8006038 <__sfp+0x60>
 800605a:	bf00      	nop
 800605c:	080076cc 	.word	0x080076cc
 8006060:	ffff0001 	.word	0xffff0001

08006064 <_fwalk_reent>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4606      	mov	r6, r0
 800606a:	4688      	mov	r8, r1
 800606c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006070:	2700      	movs	r7, #0
 8006072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006076:	f1b9 0901 	subs.w	r9, r9, #1
 800607a:	d505      	bpl.n	8006088 <_fwalk_reent+0x24>
 800607c:	6824      	ldr	r4, [r4, #0]
 800607e:	2c00      	cmp	r4, #0
 8006080:	d1f7      	bne.n	8006072 <_fwalk_reent+0xe>
 8006082:	4638      	mov	r0, r7
 8006084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006088:	89ab      	ldrh	r3, [r5, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d907      	bls.n	800609e <_fwalk_reent+0x3a>
 800608e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006092:	3301      	adds	r3, #1
 8006094:	d003      	beq.n	800609e <_fwalk_reent+0x3a>
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	47c0      	blx	r8
 800609c:	4307      	orrs	r7, r0
 800609e:	3568      	adds	r5, #104	; 0x68
 80060a0:	e7e9      	b.n	8006076 <_fwalk_reent+0x12>
	...

080060a4 <__libc_init_array>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4d0d      	ldr	r5, [pc, #52]	; (80060dc <__libc_init_array+0x38>)
 80060a8:	4c0d      	ldr	r4, [pc, #52]	; (80060e0 <__libc_init_array+0x3c>)
 80060aa:	1b64      	subs	r4, r4, r5
 80060ac:	10a4      	asrs	r4, r4, #2
 80060ae:	2600      	movs	r6, #0
 80060b0:	42a6      	cmp	r6, r4
 80060b2:	d109      	bne.n	80060c8 <__libc_init_array+0x24>
 80060b4:	4d0b      	ldr	r5, [pc, #44]	; (80060e4 <__libc_init_array+0x40>)
 80060b6:	4c0c      	ldr	r4, [pc, #48]	; (80060e8 <__libc_init_array+0x44>)
 80060b8:	f001 fa22 	bl	8007500 <_init>
 80060bc:	1b64      	subs	r4, r4, r5
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	2600      	movs	r6, #0
 80060c2:	42a6      	cmp	r6, r4
 80060c4:	d105      	bne.n	80060d2 <__libc_init_array+0x2e>
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060cc:	4798      	blx	r3
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7ee      	b.n	80060b0 <__libc_init_array+0xc>
 80060d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d6:	4798      	blx	r3
 80060d8:	3601      	adds	r6, #1
 80060da:	e7f2      	b.n	80060c2 <__libc_init_array+0x1e>
 80060dc:	080077bc 	.word	0x080077bc
 80060e0:	080077bc 	.word	0x080077bc
 80060e4:	080077bc 	.word	0x080077bc
 80060e8:	080077c0 	.word	0x080077c0

080060ec <__retarget_lock_init_recursive>:
 80060ec:	4770      	bx	lr

080060ee <__retarget_lock_acquire_recursive>:
 80060ee:	4770      	bx	lr

080060f0 <__retarget_lock_release_recursive>:
 80060f0:	4770      	bx	lr

080060f2 <memcpy>:
 80060f2:	440a      	add	r2, r1
 80060f4:	4291      	cmp	r1, r2
 80060f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060fa:	d100      	bne.n	80060fe <memcpy+0xc>
 80060fc:	4770      	bx	lr
 80060fe:	b510      	push	{r4, lr}
 8006100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006108:	4291      	cmp	r1, r2
 800610a:	d1f9      	bne.n	8006100 <memcpy+0xe>
 800610c:	bd10      	pop	{r4, pc}

0800610e <memset>:
 800610e:	4402      	add	r2, r0
 8006110:	4603      	mov	r3, r0
 8006112:	4293      	cmp	r3, r2
 8006114:	d100      	bne.n	8006118 <memset+0xa>
 8006116:	4770      	bx	lr
 8006118:	f803 1b01 	strb.w	r1, [r3], #1
 800611c:	e7f9      	b.n	8006112 <memset+0x4>
	...

08006120 <sbrk_aligned>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4e0e      	ldr	r6, [pc, #56]	; (800615c <sbrk_aligned+0x3c>)
 8006124:	460c      	mov	r4, r1
 8006126:	6831      	ldr	r1, [r6, #0]
 8006128:	4605      	mov	r5, r0
 800612a:	b911      	cbnz	r1, 8006132 <sbrk_aligned+0x12>
 800612c:	f000 f97a 	bl	8006424 <_sbrk_r>
 8006130:	6030      	str	r0, [r6, #0]
 8006132:	4621      	mov	r1, r4
 8006134:	4628      	mov	r0, r5
 8006136:	f000 f975 	bl	8006424 <_sbrk_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	d00a      	beq.n	8006154 <sbrk_aligned+0x34>
 800613e:	1cc4      	adds	r4, r0, #3
 8006140:	f024 0403 	bic.w	r4, r4, #3
 8006144:	42a0      	cmp	r0, r4
 8006146:	d007      	beq.n	8006158 <sbrk_aligned+0x38>
 8006148:	1a21      	subs	r1, r4, r0
 800614a:	4628      	mov	r0, r5
 800614c:	f000 f96a 	bl	8006424 <_sbrk_r>
 8006150:	3001      	adds	r0, #1
 8006152:	d101      	bne.n	8006158 <sbrk_aligned+0x38>
 8006154:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006158:	4620      	mov	r0, r4
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	20004b7c 	.word	0x20004b7c

08006160 <_malloc_r>:
 8006160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	1ccd      	adds	r5, r1, #3
 8006166:	f025 0503 	bic.w	r5, r5, #3
 800616a:	3508      	adds	r5, #8
 800616c:	2d0c      	cmp	r5, #12
 800616e:	bf38      	it	cc
 8006170:	250c      	movcc	r5, #12
 8006172:	2d00      	cmp	r5, #0
 8006174:	4607      	mov	r7, r0
 8006176:	db01      	blt.n	800617c <_malloc_r+0x1c>
 8006178:	42a9      	cmp	r1, r5
 800617a:	d905      	bls.n	8006188 <_malloc_r+0x28>
 800617c:	230c      	movs	r3, #12
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	2600      	movs	r6, #0
 8006182:	4630      	mov	r0, r6
 8006184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006188:	4e2e      	ldr	r6, [pc, #184]	; (8006244 <_malloc_r+0xe4>)
 800618a:	f000 fb19 	bl	80067c0 <__malloc_lock>
 800618e:	6833      	ldr	r3, [r6, #0]
 8006190:	461c      	mov	r4, r3
 8006192:	bb34      	cbnz	r4, 80061e2 <_malloc_r+0x82>
 8006194:	4629      	mov	r1, r5
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff ffc2 	bl	8006120 <sbrk_aligned>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	4604      	mov	r4, r0
 80061a0:	d14d      	bne.n	800623e <_malloc_r+0xde>
 80061a2:	6834      	ldr	r4, [r6, #0]
 80061a4:	4626      	mov	r6, r4
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	d140      	bne.n	800622c <_malloc_r+0xcc>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	4631      	mov	r1, r6
 80061ae:	4638      	mov	r0, r7
 80061b0:	eb04 0803 	add.w	r8, r4, r3
 80061b4:	f000 f936 	bl	8006424 <_sbrk_r>
 80061b8:	4580      	cmp	r8, r0
 80061ba:	d13a      	bne.n	8006232 <_malloc_r+0xd2>
 80061bc:	6821      	ldr	r1, [r4, #0]
 80061be:	3503      	adds	r5, #3
 80061c0:	1a6d      	subs	r5, r5, r1
 80061c2:	f025 0503 	bic.w	r5, r5, #3
 80061c6:	3508      	adds	r5, #8
 80061c8:	2d0c      	cmp	r5, #12
 80061ca:	bf38      	it	cc
 80061cc:	250c      	movcc	r5, #12
 80061ce:	4629      	mov	r1, r5
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff ffa5 	bl	8006120 <sbrk_aligned>
 80061d6:	3001      	adds	r0, #1
 80061d8:	d02b      	beq.n	8006232 <_malloc_r+0xd2>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	442b      	add	r3, r5
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	e00e      	b.n	8006200 <_malloc_r+0xa0>
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	1b52      	subs	r2, r2, r5
 80061e6:	d41e      	bmi.n	8006226 <_malloc_r+0xc6>
 80061e8:	2a0b      	cmp	r2, #11
 80061ea:	d916      	bls.n	800621a <_malloc_r+0xba>
 80061ec:	1961      	adds	r1, r4, r5
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	6025      	str	r5, [r4, #0]
 80061f2:	bf18      	it	ne
 80061f4:	6059      	strne	r1, [r3, #4]
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	bf08      	it	eq
 80061fa:	6031      	streq	r1, [r6, #0]
 80061fc:	5162      	str	r2, [r4, r5]
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	4638      	mov	r0, r7
 8006202:	f104 060b 	add.w	r6, r4, #11
 8006206:	f000 fae1 	bl	80067cc <__malloc_unlock>
 800620a:	f026 0607 	bic.w	r6, r6, #7
 800620e:	1d23      	adds	r3, r4, #4
 8006210:	1af2      	subs	r2, r6, r3
 8006212:	d0b6      	beq.n	8006182 <_malloc_r+0x22>
 8006214:	1b9b      	subs	r3, r3, r6
 8006216:	50a3      	str	r3, [r4, r2]
 8006218:	e7b3      	b.n	8006182 <_malloc_r+0x22>
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	42a3      	cmp	r3, r4
 800621e:	bf0c      	ite	eq
 8006220:	6032      	streq	r2, [r6, #0]
 8006222:	605a      	strne	r2, [r3, #4]
 8006224:	e7ec      	b.n	8006200 <_malloc_r+0xa0>
 8006226:	4623      	mov	r3, r4
 8006228:	6864      	ldr	r4, [r4, #4]
 800622a:	e7b2      	b.n	8006192 <_malloc_r+0x32>
 800622c:	4634      	mov	r4, r6
 800622e:	6876      	ldr	r6, [r6, #4]
 8006230:	e7b9      	b.n	80061a6 <_malloc_r+0x46>
 8006232:	230c      	movs	r3, #12
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	4638      	mov	r0, r7
 8006238:	f000 fac8 	bl	80067cc <__malloc_unlock>
 800623c:	e7a1      	b.n	8006182 <_malloc_r+0x22>
 800623e:	6025      	str	r5, [r4, #0]
 8006240:	e7de      	b.n	8006200 <_malloc_r+0xa0>
 8006242:	bf00      	nop
 8006244:	20004b78 	.word	0x20004b78

08006248 <iprintf>:
 8006248:	b40f      	push	{r0, r1, r2, r3}
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <iprintf+0x2c>)
 800624c:	b513      	push	{r0, r1, r4, lr}
 800624e:	681c      	ldr	r4, [r3, #0]
 8006250:	b124      	cbz	r4, 800625c <iprintf+0x14>
 8006252:	69a3      	ldr	r3, [r4, #24]
 8006254:	b913      	cbnz	r3, 800625c <iprintf+0x14>
 8006256:	4620      	mov	r0, r4
 8006258:	f7ff fe86 	bl	8005f68 <__sinit>
 800625c:	ab05      	add	r3, sp, #20
 800625e:	9a04      	ldr	r2, [sp, #16]
 8006260:	68a1      	ldr	r1, [r4, #8]
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fc89 	bl	8006b7c <_vfiprintf_r>
 800626a:	b002      	add	sp, #8
 800626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006270:	b004      	add	sp, #16
 8006272:	4770      	bx	lr
 8006274:	20000010 	.word	0x20000010

08006278 <srand>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <srand+0x44>)
 800627c:	681d      	ldr	r5, [r3, #0]
 800627e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006280:	4604      	mov	r4, r0
 8006282:	b9b3      	cbnz	r3, 80062b2 <srand+0x3a>
 8006284:	2018      	movs	r0, #24
 8006286:	f000 fa93 	bl	80067b0 <malloc>
 800628a:	4602      	mov	r2, r0
 800628c:	63a8      	str	r0, [r5, #56]	; 0x38
 800628e:	b920      	cbnz	r0, 800629a <srand+0x22>
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <srand+0x48>)
 8006292:	480c      	ldr	r0, [pc, #48]	; (80062c4 <srand+0x4c>)
 8006294:	2142      	movs	r1, #66	; 0x42
 8006296:	f000 f965 	bl	8006564 <__assert_func>
 800629a:	490b      	ldr	r1, [pc, #44]	; (80062c8 <srand+0x50>)
 800629c:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <srand+0x54>)
 800629e:	e9c0 1300 	strd	r1, r3, [r0]
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <srand+0x58>)
 80062a4:	6083      	str	r3, [r0, #8]
 80062a6:	230b      	movs	r3, #11
 80062a8:	8183      	strh	r3, [r0, #12]
 80062aa:	2100      	movs	r1, #0
 80062ac:	2001      	movs	r0, #1
 80062ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80062b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80062b4:	2200      	movs	r2, #0
 80062b6:	611c      	str	r4, [r3, #16]
 80062b8:	615a      	str	r2, [r3, #20]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000010 	.word	0x20000010
 80062c0:	080076d0 	.word	0x080076d0
 80062c4:	080076e7 	.word	0x080076e7
 80062c8:	abcd330e 	.word	0xabcd330e
 80062cc:	e66d1234 	.word	0xe66d1234
 80062d0:	0005deec 	.word	0x0005deec

080062d4 <rand>:
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <rand+0x5c>)
 80062d6:	b510      	push	{r4, lr}
 80062d8:	681c      	ldr	r4, [r3, #0]
 80062da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062dc:	b9b3      	cbnz	r3, 800630c <rand+0x38>
 80062de:	2018      	movs	r0, #24
 80062e0:	f000 fa66 	bl	80067b0 <malloc>
 80062e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80062e6:	b928      	cbnz	r0, 80062f4 <rand+0x20>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <rand+0x60>)
 80062ec:	4812      	ldr	r0, [pc, #72]	; (8006338 <rand+0x64>)
 80062ee:	214e      	movs	r1, #78	; 0x4e
 80062f0:	f000 f938 	bl	8006564 <__assert_func>
 80062f4:	4a11      	ldr	r2, [pc, #68]	; (800633c <rand+0x68>)
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <rand+0x6c>)
 80062f8:	e9c0 2300 	strd	r2, r3, [r0]
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <rand+0x70>)
 80062fe:	6083      	str	r3, [r0, #8]
 8006300:	230b      	movs	r3, #11
 8006302:	8183      	strh	r3, [r0, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	2300      	movs	r3, #0
 8006308:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800630c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800630e:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <rand+0x74>)
 8006310:	6920      	ldr	r0, [r4, #16]
 8006312:	6963      	ldr	r3, [r4, #20]
 8006314:	490d      	ldr	r1, [pc, #52]	; (800634c <rand+0x78>)
 8006316:	4342      	muls	r2, r0
 8006318:	fb01 2203 	mla	r2, r1, r3, r2
 800631c:	fba0 0101 	umull	r0, r1, r0, r1
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	eb42 0001 	adc.w	r0, r2, r1
 8006326:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800632a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800632e:	bd10      	pop	{r4, pc}
 8006330:	20000010 	.word	0x20000010
 8006334:	080076d0 	.word	0x080076d0
 8006338:	080076e7 	.word	0x080076e7
 800633c:	abcd330e 	.word	0xabcd330e
 8006340:	e66d1234 	.word	0xe66d1234
 8006344:	0005deec 	.word	0x0005deec
 8006348:	5851f42d 	.word	0x5851f42d
 800634c:	4c957f2d 	.word	0x4c957f2d

08006350 <cleanup_glue>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	6809      	ldr	r1, [r1, #0]
 8006356:	4605      	mov	r5, r0
 8006358:	b109      	cbz	r1, 800635e <cleanup_glue+0xe>
 800635a:	f7ff fff9 	bl	8006350 <cleanup_glue>
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006366:	f000 ba37 	b.w	80067d8 <_free_r>
	...

0800636c <_reclaim_reent>:
 800636c:	4b2c      	ldr	r3, [pc, #176]	; (8006420 <_reclaim_reent+0xb4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4283      	cmp	r3, r0
 8006372:	b570      	push	{r4, r5, r6, lr}
 8006374:	4604      	mov	r4, r0
 8006376:	d051      	beq.n	800641c <_reclaim_reent+0xb0>
 8006378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800637a:	b143      	cbz	r3, 800638e <_reclaim_reent+0x22>
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d14a      	bne.n	8006418 <_reclaim_reent+0xac>
 8006382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006384:	6819      	ldr	r1, [r3, #0]
 8006386:	b111      	cbz	r1, 800638e <_reclaim_reent+0x22>
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fa25 	bl	80067d8 <_free_r>
 800638e:	6961      	ldr	r1, [r4, #20]
 8006390:	b111      	cbz	r1, 8006398 <_reclaim_reent+0x2c>
 8006392:	4620      	mov	r0, r4
 8006394:	f000 fa20 	bl	80067d8 <_free_r>
 8006398:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800639a:	b111      	cbz	r1, 80063a2 <_reclaim_reent+0x36>
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fa1b 	bl	80067d8 <_free_r>
 80063a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063a4:	b111      	cbz	r1, 80063ac <_reclaim_reent+0x40>
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 fa16 	bl	80067d8 <_free_r>
 80063ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80063ae:	b111      	cbz	r1, 80063b6 <_reclaim_reent+0x4a>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fa11 	bl	80067d8 <_free_r>
 80063b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063b8:	b111      	cbz	r1, 80063c0 <_reclaim_reent+0x54>
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fa0c 	bl	80067d8 <_free_r>
 80063c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80063c2:	b111      	cbz	r1, 80063ca <_reclaim_reent+0x5e>
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fa07 	bl	80067d8 <_free_r>
 80063ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80063cc:	b111      	cbz	r1, 80063d4 <_reclaim_reent+0x68>
 80063ce:	4620      	mov	r0, r4
 80063d0:	f000 fa02 	bl	80067d8 <_free_r>
 80063d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063d6:	b111      	cbz	r1, 80063de <_reclaim_reent+0x72>
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 f9fd 	bl	80067d8 <_free_r>
 80063de:	69a3      	ldr	r3, [r4, #24]
 80063e0:	b1e3      	cbz	r3, 800641c <_reclaim_reent+0xb0>
 80063e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063e4:	4620      	mov	r0, r4
 80063e6:	4798      	blx	r3
 80063e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063ea:	b1b9      	cbz	r1, 800641c <_reclaim_reent+0xb0>
 80063ec:	4620      	mov	r0, r4
 80063ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063f2:	f7ff bfad 	b.w	8006350 <cleanup_glue>
 80063f6:	5949      	ldr	r1, [r1, r5]
 80063f8:	b941      	cbnz	r1, 800640c <_reclaim_reent+0xa0>
 80063fa:	3504      	adds	r5, #4
 80063fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063fe:	2d80      	cmp	r5, #128	; 0x80
 8006400:	68d9      	ldr	r1, [r3, #12]
 8006402:	d1f8      	bne.n	80063f6 <_reclaim_reent+0x8a>
 8006404:	4620      	mov	r0, r4
 8006406:	f000 f9e7 	bl	80067d8 <_free_r>
 800640a:	e7ba      	b.n	8006382 <_reclaim_reent+0x16>
 800640c:	680e      	ldr	r6, [r1, #0]
 800640e:	4620      	mov	r0, r4
 8006410:	f000 f9e2 	bl	80067d8 <_free_r>
 8006414:	4631      	mov	r1, r6
 8006416:	e7ef      	b.n	80063f8 <_reclaim_reent+0x8c>
 8006418:	2500      	movs	r5, #0
 800641a:	e7ef      	b.n	80063fc <_reclaim_reent+0x90>
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	bf00      	nop
 8006420:	20000010 	.word	0x20000010

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4d06      	ldr	r5, [pc, #24]	; (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fa fe34 	bl	800109c <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20004b80 	.word	0x20004b80

08006444 <siprintf>:
 8006444:	b40e      	push	{r1, r2, r3}
 8006446:	b500      	push	{lr}
 8006448:	b09c      	sub	sp, #112	; 0x70
 800644a:	ab1d      	add	r3, sp, #116	; 0x74
 800644c:	9002      	str	r0, [sp, #8]
 800644e:	9006      	str	r0, [sp, #24]
 8006450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006454:	4809      	ldr	r0, [pc, #36]	; (800647c <siprintf+0x38>)
 8006456:	9107      	str	r1, [sp, #28]
 8006458:	9104      	str	r1, [sp, #16]
 800645a:	4909      	ldr	r1, [pc, #36]	; (8006480 <siprintf+0x3c>)
 800645c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006460:	9105      	str	r1, [sp, #20]
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	a902      	add	r1, sp, #8
 8006468:	f000 fa5e 	bl	8006928 <_svfiprintf_r>
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	b01c      	add	sp, #112	; 0x70
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b003      	add	sp, #12
 800647a:	4770      	bx	lr
 800647c:	20000010 	.word	0x20000010
 8006480:	ffff0208 	.word	0xffff0208

08006484 <__sread>:
 8006484:	b510      	push	{r4, lr}
 8006486:	460c      	mov	r4, r1
 8006488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648c:	f000 fe3a 	bl	8007104 <_read_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	bfab      	itete	ge
 8006494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006496:	89a3      	ldrhlt	r3, [r4, #12]
 8006498:	181b      	addge	r3, r3, r0
 800649a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800649e:	bfac      	ite	ge
 80064a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064a2:	81a3      	strhlt	r3, [r4, #12]
 80064a4:	bd10      	pop	{r4, pc}

080064a6 <__swrite>:
 80064a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064aa:	461f      	mov	r7, r3
 80064ac:	898b      	ldrh	r3, [r1, #12]
 80064ae:	05db      	lsls	r3, r3, #23
 80064b0:	4605      	mov	r5, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4616      	mov	r6, r2
 80064b6:	d505      	bpl.n	80064c4 <__swrite+0x1e>
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	2302      	movs	r3, #2
 80064be:	2200      	movs	r2, #0
 80064c0:	f000 f964 	bl	800678c <_lseek_r>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	4632      	mov	r2, r6
 80064d2:	463b      	mov	r3, r7
 80064d4:	4628      	mov	r0, r5
 80064d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	f000 b831 	b.w	8006540 <_write_r>

080064de <__sseek>:
 80064de:	b510      	push	{r4, lr}
 80064e0:	460c      	mov	r4, r1
 80064e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e6:	f000 f951 	bl	800678c <_lseek_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	bf15      	itete	ne
 80064f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80064f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064fa:	81a3      	strheq	r3, [r4, #12]
 80064fc:	bf18      	it	ne
 80064fe:	81a3      	strhne	r3, [r4, #12]
 8006500:	bd10      	pop	{r4, pc}

08006502 <__sclose>:
 8006502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006506:	f000 b84b 	b.w	80065a0 <_close_r>
	...

0800650c <time>:
 800650c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <time+0x30>)
 8006510:	2200      	movs	r2, #0
 8006512:	4669      	mov	r1, sp
 8006514:	4604      	mov	r4, r0
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	f000 f926 	bl	8006768 <_gettimeofday_r>
 800651c:	2800      	cmp	r0, #0
 800651e:	bfbe      	ittt	lt
 8006520:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8006524:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006528:	e9cd 2300 	strdlt	r2, r3, [sp]
 800652c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006530:	b10c      	cbz	r4, 8006536 <time+0x2a>
 8006532:	e9c4 0100 	strd	r0, r1, [r4]
 8006536:	b004      	add	sp, #16
 8006538:	bd10      	pop	{r4, pc}
 800653a:	bf00      	nop
 800653c:	20000010 	.word	0x20000010

08006540 <_write_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d07      	ldr	r5, [pc, #28]	; (8006560 <_write_r+0x20>)
 8006544:	4604      	mov	r4, r0
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	2200      	movs	r2, #0
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f7fa fd53 	bl	8000ffa <_write>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_write_r+0x1e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_write_r+0x1e>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20004b80 	.word	0x20004b80

08006564 <__assert_func>:
 8006564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006566:	4614      	mov	r4, r2
 8006568:	461a      	mov	r2, r3
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <__assert_func+0x2c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4605      	mov	r5, r0
 8006570:	68d8      	ldr	r0, [r3, #12]
 8006572:	b14c      	cbz	r4, 8006588 <__assert_func+0x24>
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <__assert_func+0x30>)
 8006576:	9100      	str	r1, [sp, #0]
 8006578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800657c:	4906      	ldr	r1, [pc, #24]	; (8006598 <__assert_func+0x34>)
 800657e:	462b      	mov	r3, r5
 8006580:	f000 f8e0 	bl	8006744 <fiprintf>
 8006584:	f000 fe90 	bl	80072a8 <abort>
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <__assert_func+0x38>)
 800658a:	461c      	mov	r4, r3
 800658c:	e7f3      	b.n	8006576 <__assert_func+0x12>
 800658e:	bf00      	nop
 8006590:	20000010 	.word	0x20000010
 8006594:	08007742 	.word	0x08007742
 8006598:	0800774f 	.word	0x0800774f
 800659c:	0800777d 	.word	0x0800777d

080065a0 <_close_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	; (80065bc <_close_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fa fd41 	bl	8001032 <_close>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_close_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_close_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20004b80 	.word	0x20004b80

080065c0 <__sflush_r>:
 80065c0:	898a      	ldrh	r2, [r1, #12]
 80065c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c6:	4605      	mov	r5, r0
 80065c8:	0710      	lsls	r0, r2, #28
 80065ca:	460c      	mov	r4, r1
 80065cc:	d458      	bmi.n	8006680 <__sflush_r+0xc0>
 80065ce:	684b      	ldr	r3, [r1, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dc05      	bgt.n	80065e0 <__sflush_r+0x20>
 80065d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dc02      	bgt.n	80065e0 <__sflush_r+0x20>
 80065da:	2000      	movs	r0, #0
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	d0f9      	beq.n	80065da <__sflush_r+0x1a>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065ec:	682f      	ldr	r7, [r5, #0]
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	d032      	beq.n	8006658 <__sflush_r+0x98>
 80065f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	075a      	lsls	r2, r3, #29
 80065f8:	d505      	bpl.n	8006606 <__sflush_r+0x46>
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	1ac0      	subs	r0, r0, r3
 80065fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006600:	b10b      	cbz	r3, 8006606 <__sflush_r+0x46>
 8006602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006604:	1ac0      	subs	r0, r0, r3
 8006606:	2300      	movs	r3, #0
 8006608:	4602      	mov	r2, r0
 800660a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800660c:	6a21      	ldr	r1, [r4, #32]
 800660e:	4628      	mov	r0, r5
 8006610:	47b0      	blx	r6
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	d106      	bne.n	8006626 <__sflush_r+0x66>
 8006618:	6829      	ldr	r1, [r5, #0]
 800661a:	291d      	cmp	r1, #29
 800661c:	d82c      	bhi.n	8006678 <__sflush_r+0xb8>
 800661e:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <__sflush_r+0x108>)
 8006620:	40ca      	lsrs	r2, r1
 8006622:	07d6      	lsls	r6, r2, #31
 8006624:	d528      	bpl.n	8006678 <__sflush_r+0xb8>
 8006626:	2200      	movs	r2, #0
 8006628:	6062      	str	r2, [r4, #4]
 800662a:	04d9      	lsls	r1, r3, #19
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	6022      	str	r2, [r4, #0]
 8006630:	d504      	bpl.n	800663c <__sflush_r+0x7c>
 8006632:	1c42      	adds	r2, r0, #1
 8006634:	d101      	bne.n	800663a <__sflush_r+0x7a>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	b903      	cbnz	r3, 800663c <__sflush_r+0x7c>
 800663a:	6560      	str	r0, [r4, #84]	; 0x54
 800663c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800663e:	602f      	str	r7, [r5, #0]
 8006640:	2900      	cmp	r1, #0
 8006642:	d0ca      	beq.n	80065da <__sflush_r+0x1a>
 8006644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006648:	4299      	cmp	r1, r3
 800664a:	d002      	beq.n	8006652 <__sflush_r+0x92>
 800664c:	4628      	mov	r0, r5
 800664e:	f000 f8c3 	bl	80067d8 <_free_r>
 8006652:	2000      	movs	r0, #0
 8006654:	6360      	str	r0, [r4, #52]	; 0x34
 8006656:	e7c1      	b.n	80065dc <__sflush_r+0x1c>
 8006658:	6a21      	ldr	r1, [r4, #32]
 800665a:	2301      	movs	r3, #1
 800665c:	4628      	mov	r0, r5
 800665e:	47b0      	blx	r6
 8006660:	1c41      	adds	r1, r0, #1
 8006662:	d1c7      	bne.n	80065f4 <__sflush_r+0x34>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0c4      	beq.n	80065f4 <__sflush_r+0x34>
 800666a:	2b1d      	cmp	r3, #29
 800666c:	d001      	beq.n	8006672 <__sflush_r+0xb2>
 800666e:	2b16      	cmp	r3, #22
 8006670:	d101      	bne.n	8006676 <__sflush_r+0xb6>
 8006672:	602f      	str	r7, [r5, #0]
 8006674:	e7b1      	b.n	80065da <__sflush_r+0x1a>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	e7ad      	b.n	80065dc <__sflush_r+0x1c>
 8006680:	690f      	ldr	r7, [r1, #16]
 8006682:	2f00      	cmp	r7, #0
 8006684:	d0a9      	beq.n	80065da <__sflush_r+0x1a>
 8006686:	0793      	lsls	r3, r2, #30
 8006688:	680e      	ldr	r6, [r1, #0]
 800668a:	bf08      	it	eq
 800668c:	694b      	ldreq	r3, [r1, #20]
 800668e:	600f      	str	r7, [r1, #0]
 8006690:	bf18      	it	ne
 8006692:	2300      	movne	r3, #0
 8006694:	eba6 0807 	sub.w	r8, r6, r7
 8006698:	608b      	str	r3, [r1, #8]
 800669a:	f1b8 0f00 	cmp.w	r8, #0
 800669e:	dd9c      	ble.n	80065da <__sflush_r+0x1a>
 80066a0:	6a21      	ldr	r1, [r4, #32]
 80066a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066a4:	4643      	mov	r3, r8
 80066a6:	463a      	mov	r2, r7
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	2800      	cmp	r0, #0
 80066ae:	dc06      	bgt.n	80066be <__sflush_r+0xfe>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066bc:	e78e      	b.n	80065dc <__sflush_r+0x1c>
 80066be:	4407      	add	r7, r0
 80066c0:	eba8 0800 	sub.w	r8, r8, r0
 80066c4:	e7e9      	b.n	800669a <__sflush_r+0xda>
 80066c6:	bf00      	nop
 80066c8:	20400001 	.word	0x20400001

080066cc <_fflush_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	690b      	ldr	r3, [r1, #16]
 80066d0:	4605      	mov	r5, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	b913      	cbnz	r3, 80066dc <_fflush_r+0x10>
 80066d6:	2500      	movs	r5, #0
 80066d8:	4628      	mov	r0, r5
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	b118      	cbz	r0, 80066e6 <_fflush_r+0x1a>
 80066de:	6983      	ldr	r3, [r0, #24]
 80066e0:	b90b      	cbnz	r3, 80066e6 <_fflush_r+0x1a>
 80066e2:	f7ff fc41 	bl	8005f68 <__sinit>
 80066e6:	4b14      	ldr	r3, [pc, #80]	; (8006738 <_fflush_r+0x6c>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d11b      	bne.n	8006724 <_fflush_r+0x58>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ef      	beq.n	80066d6 <_fflush_r+0xa>
 80066f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066f8:	07d0      	lsls	r0, r2, #31
 80066fa:	d404      	bmi.n	8006706 <_fflush_r+0x3a>
 80066fc:	0599      	lsls	r1, r3, #22
 80066fe:	d402      	bmi.n	8006706 <_fflush_r+0x3a>
 8006700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006702:	f7ff fcf4 	bl	80060ee <__retarget_lock_acquire_recursive>
 8006706:	4628      	mov	r0, r5
 8006708:	4621      	mov	r1, r4
 800670a:	f7ff ff59 	bl	80065c0 <__sflush_r>
 800670e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006710:	07da      	lsls	r2, r3, #31
 8006712:	4605      	mov	r5, r0
 8006714:	d4e0      	bmi.n	80066d8 <_fflush_r+0xc>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	059b      	lsls	r3, r3, #22
 800671a:	d4dd      	bmi.n	80066d8 <_fflush_r+0xc>
 800671c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671e:	f7ff fce7 	bl	80060f0 <__retarget_lock_release_recursive>
 8006722:	e7d9      	b.n	80066d8 <_fflush_r+0xc>
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <_fflush_r+0x70>)
 8006726:	429c      	cmp	r4, r3
 8006728:	d101      	bne.n	800672e <_fflush_r+0x62>
 800672a:	68ac      	ldr	r4, [r5, #8]
 800672c:	e7df      	b.n	80066ee <_fflush_r+0x22>
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <_fflush_r+0x74>)
 8006730:	429c      	cmp	r4, r3
 8006732:	bf08      	it	eq
 8006734:	68ec      	ldreq	r4, [r5, #12]
 8006736:	e7da      	b.n	80066ee <_fflush_r+0x22>
 8006738:	0800768c 	.word	0x0800768c
 800673c:	080076ac 	.word	0x080076ac
 8006740:	0800766c 	.word	0x0800766c

08006744 <fiprintf>:
 8006744:	b40e      	push	{r1, r2, r3}
 8006746:	b503      	push	{r0, r1, lr}
 8006748:	4601      	mov	r1, r0
 800674a:	ab03      	add	r3, sp, #12
 800674c:	4805      	ldr	r0, [pc, #20]	; (8006764 <fiprintf+0x20>)
 800674e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006752:	6800      	ldr	r0, [r0, #0]
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	f000 fa11 	bl	8006b7c <_vfiprintf_r>
 800675a:	b002      	add	sp, #8
 800675c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006760:	b003      	add	sp, #12
 8006762:	4770      	bx	lr
 8006764:	20000010 	.word	0x20000010

08006768 <_gettimeofday_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d07      	ldr	r5, [pc, #28]	; (8006788 <_gettimeofday_r+0x20>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	4611      	mov	r1, r2
 8006774:	602b      	str	r3, [r5, #0]
 8006776:	f000 febb 	bl	80074f0 <_gettimeofday>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d102      	bne.n	8006784 <_gettimeofday_r+0x1c>
 800677e:	682b      	ldr	r3, [r5, #0]
 8006780:	b103      	cbz	r3, 8006784 <_gettimeofday_r+0x1c>
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	20004b80 	.word	0x20004b80

0800678c <_lseek_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4d07      	ldr	r5, [pc, #28]	; (80067ac <_lseek_r+0x20>)
 8006790:	4604      	mov	r4, r0
 8006792:	4608      	mov	r0, r1
 8006794:	4611      	mov	r1, r2
 8006796:	2200      	movs	r2, #0
 8006798:	602a      	str	r2, [r5, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	f7fa fc70 	bl	8001080 <_lseek>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d102      	bne.n	80067aa <_lseek_r+0x1e>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	b103      	cbz	r3, 80067aa <_lseek_r+0x1e>
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	20004b80 	.word	0x20004b80

080067b0 <malloc>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <malloc+0xc>)
 80067b2:	4601      	mov	r1, r0
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f7ff bcd3 	b.w	8006160 <_malloc_r>
 80067ba:	bf00      	nop
 80067bc:	20000010 	.word	0x20000010

080067c0 <__malloc_lock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_lock+0x8>)
 80067c2:	f7ff bc94 	b.w	80060ee <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	20004b74 	.word	0x20004b74

080067cc <__malloc_unlock>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__malloc_unlock+0x8>)
 80067ce:	f7ff bc8f 	b.w	80060f0 <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	20004b74 	.word	0x20004b74

080067d8 <_free_r>:
 80067d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067da:	2900      	cmp	r1, #0
 80067dc:	d044      	beq.n	8006868 <_free_r+0x90>
 80067de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e2:	9001      	str	r0, [sp, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f1a1 0404 	sub.w	r4, r1, #4
 80067ea:	bfb8      	it	lt
 80067ec:	18e4      	addlt	r4, r4, r3
 80067ee:	f7ff ffe7 	bl	80067c0 <__malloc_lock>
 80067f2:	4a1e      	ldr	r2, [pc, #120]	; (800686c <_free_r+0x94>)
 80067f4:	9801      	ldr	r0, [sp, #4]
 80067f6:	6813      	ldr	r3, [r2, #0]
 80067f8:	b933      	cbnz	r3, 8006808 <_free_r+0x30>
 80067fa:	6063      	str	r3, [r4, #4]
 80067fc:	6014      	str	r4, [r2, #0]
 80067fe:	b003      	add	sp, #12
 8006800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006804:	f7ff bfe2 	b.w	80067cc <__malloc_unlock>
 8006808:	42a3      	cmp	r3, r4
 800680a:	d908      	bls.n	800681e <_free_r+0x46>
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1961      	adds	r1, r4, r5
 8006810:	428b      	cmp	r3, r1
 8006812:	bf01      	itttt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	1949      	addeq	r1, r1, r5
 800681a:	6021      	streq	r1, [r4, #0]
 800681c:	e7ed      	b.n	80067fa <_free_r+0x22>
 800681e:	461a      	mov	r2, r3
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	b10b      	cbz	r3, 8006828 <_free_r+0x50>
 8006824:	42a3      	cmp	r3, r4
 8006826:	d9fa      	bls.n	800681e <_free_r+0x46>
 8006828:	6811      	ldr	r1, [r2, #0]
 800682a:	1855      	adds	r5, r2, r1
 800682c:	42a5      	cmp	r5, r4
 800682e:	d10b      	bne.n	8006848 <_free_r+0x70>
 8006830:	6824      	ldr	r4, [r4, #0]
 8006832:	4421      	add	r1, r4
 8006834:	1854      	adds	r4, r2, r1
 8006836:	42a3      	cmp	r3, r4
 8006838:	6011      	str	r1, [r2, #0]
 800683a:	d1e0      	bne.n	80067fe <_free_r+0x26>
 800683c:	681c      	ldr	r4, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	6053      	str	r3, [r2, #4]
 8006842:	4421      	add	r1, r4
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	e7da      	b.n	80067fe <_free_r+0x26>
 8006848:	d902      	bls.n	8006850 <_free_r+0x78>
 800684a:	230c      	movs	r3, #12
 800684c:	6003      	str	r3, [r0, #0]
 800684e:	e7d6      	b.n	80067fe <_free_r+0x26>
 8006850:	6825      	ldr	r5, [r4, #0]
 8006852:	1961      	adds	r1, r4, r5
 8006854:	428b      	cmp	r3, r1
 8006856:	bf04      	itt	eq
 8006858:	6819      	ldreq	r1, [r3, #0]
 800685a:	685b      	ldreq	r3, [r3, #4]
 800685c:	6063      	str	r3, [r4, #4]
 800685e:	bf04      	itt	eq
 8006860:	1949      	addeq	r1, r1, r5
 8006862:	6021      	streq	r1, [r4, #0]
 8006864:	6054      	str	r4, [r2, #4]
 8006866:	e7ca      	b.n	80067fe <_free_r+0x26>
 8006868:	b003      	add	sp, #12
 800686a:	bd30      	pop	{r4, r5, pc}
 800686c:	20004b78 	.word	0x20004b78

08006870 <__ssputs_r>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	688e      	ldr	r6, [r1, #8]
 8006876:	429e      	cmp	r6, r3
 8006878:	4682      	mov	sl, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4690      	mov	r8, r2
 800687e:	461f      	mov	r7, r3
 8006880:	d838      	bhi.n	80068f4 <__ssputs_r+0x84>
 8006882:	898a      	ldrh	r2, [r1, #12]
 8006884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006888:	d032      	beq.n	80068f0 <__ssputs_r+0x80>
 800688a:	6825      	ldr	r5, [r4, #0]
 800688c:	6909      	ldr	r1, [r1, #16]
 800688e:	eba5 0901 	sub.w	r9, r5, r1
 8006892:	6965      	ldr	r5, [r4, #20]
 8006894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800689c:	3301      	adds	r3, #1
 800689e:	444b      	add	r3, r9
 80068a0:	106d      	asrs	r5, r5, #1
 80068a2:	429d      	cmp	r5, r3
 80068a4:	bf38      	it	cc
 80068a6:	461d      	movcc	r5, r3
 80068a8:	0553      	lsls	r3, r2, #21
 80068aa:	d531      	bpl.n	8006910 <__ssputs_r+0xa0>
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7ff fc57 	bl	8006160 <_malloc_r>
 80068b2:	4606      	mov	r6, r0
 80068b4:	b950      	cbnz	r0, 80068cc <__ssputs_r+0x5c>
 80068b6:	230c      	movs	r3, #12
 80068b8:	f8ca 3000 	str.w	r3, [sl]
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068cc:	6921      	ldr	r1, [r4, #16]
 80068ce:	464a      	mov	r2, r9
 80068d0:	f7ff fc0f 	bl	80060f2 <memcpy>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	6126      	str	r6, [r4, #16]
 80068e2:	6165      	str	r5, [r4, #20]
 80068e4:	444e      	add	r6, r9
 80068e6:	eba5 0509 	sub.w	r5, r5, r9
 80068ea:	6026      	str	r6, [r4, #0]
 80068ec:	60a5      	str	r5, [r4, #8]
 80068ee:	463e      	mov	r6, r7
 80068f0:	42be      	cmp	r6, r7
 80068f2:	d900      	bls.n	80068f6 <__ssputs_r+0x86>
 80068f4:	463e      	mov	r6, r7
 80068f6:	6820      	ldr	r0, [r4, #0]
 80068f8:	4632      	mov	r2, r6
 80068fa:	4641      	mov	r1, r8
 80068fc:	f000 fd40 	bl	8007380 <memmove>
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	1b9b      	subs	r3, r3, r6
 8006904:	60a3      	str	r3, [r4, #8]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	4433      	add	r3, r6
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	2000      	movs	r0, #0
 800690e:	e7db      	b.n	80068c8 <__ssputs_r+0x58>
 8006910:	462a      	mov	r2, r5
 8006912:	f000 fd4f 	bl	80073b4 <_realloc_r>
 8006916:	4606      	mov	r6, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	d1e1      	bne.n	80068e0 <__ssputs_r+0x70>
 800691c:	6921      	ldr	r1, [r4, #16]
 800691e:	4650      	mov	r0, sl
 8006920:	f7ff ff5a 	bl	80067d8 <_free_r>
 8006924:	e7c7      	b.n	80068b6 <__ssputs_r+0x46>
	...

08006928 <_svfiprintf_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4698      	mov	r8, r3
 800692e:	898b      	ldrh	r3, [r1, #12]
 8006930:	061b      	lsls	r3, r3, #24
 8006932:	b09d      	sub	sp, #116	; 0x74
 8006934:	4607      	mov	r7, r0
 8006936:	460d      	mov	r5, r1
 8006938:	4614      	mov	r4, r2
 800693a:	d50e      	bpl.n	800695a <_svfiprintf_r+0x32>
 800693c:	690b      	ldr	r3, [r1, #16]
 800693e:	b963      	cbnz	r3, 800695a <_svfiprintf_r+0x32>
 8006940:	2140      	movs	r1, #64	; 0x40
 8006942:	f7ff fc0d 	bl	8006160 <_malloc_r>
 8006946:	6028      	str	r0, [r5, #0]
 8006948:	6128      	str	r0, [r5, #16]
 800694a:	b920      	cbnz	r0, 8006956 <_svfiprintf_r+0x2e>
 800694c:	230c      	movs	r3, #12
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006954:	e0d1      	b.n	8006afa <_svfiprintf_r+0x1d2>
 8006956:	2340      	movs	r3, #64	; 0x40
 8006958:	616b      	str	r3, [r5, #20]
 800695a:	2300      	movs	r3, #0
 800695c:	9309      	str	r3, [sp, #36]	; 0x24
 800695e:	2320      	movs	r3, #32
 8006960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006964:	f8cd 800c 	str.w	r8, [sp, #12]
 8006968:	2330      	movs	r3, #48	; 0x30
 800696a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b14 <_svfiprintf_r+0x1ec>
 800696e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006972:	f04f 0901 	mov.w	r9, #1
 8006976:	4623      	mov	r3, r4
 8006978:	469a      	mov	sl, r3
 800697a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800697e:	b10a      	cbz	r2, 8006984 <_svfiprintf_r+0x5c>
 8006980:	2a25      	cmp	r2, #37	; 0x25
 8006982:	d1f9      	bne.n	8006978 <_svfiprintf_r+0x50>
 8006984:	ebba 0b04 	subs.w	fp, sl, r4
 8006988:	d00b      	beq.n	80069a2 <_svfiprintf_r+0x7a>
 800698a:	465b      	mov	r3, fp
 800698c:	4622      	mov	r2, r4
 800698e:	4629      	mov	r1, r5
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff ff6d 	bl	8006870 <__ssputs_r>
 8006996:	3001      	adds	r0, #1
 8006998:	f000 80aa 	beq.w	8006af0 <_svfiprintf_r+0x1c8>
 800699c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800699e:	445a      	add	r2, fp
 80069a0:	9209      	str	r2, [sp, #36]	; 0x24
 80069a2:	f89a 3000 	ldrb.w	r3, [sl]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 80a2 	beq.w	8006af0 <_svfiprintf_r+0x1c8>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069b6:	f10a 0a01 	add.w	sl, sl, #1
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	9307      	str	r3, [sp, #28]
 80069be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069c2:	931a      	str	r3, [sp, #104]	; 0x68
 80069c4:	4654      	mov	r4, sl
 80069c6:	2205      	movs	r2, #5
 80069c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069cc:	4851      	ldr	r0, [pc, #324]	; (8006b14 <_svfiprintf_r+0x1ec>)
 80069ce:	f7f9 fc07 	bl	80001e0 <memchr>
 80069d2:	9a04      	ldr	r2, [sp, #16]
 80069d4:	b9d8      	cbnz	r0, 8006a0e <_svfiprintf_r+0xe6>
 80069d6:	06d0      	lsls	r0, r2, #27
 80069d8:	bf44      	itt	mi
 80069da:	2320      	movmi	r3, #32
 80069dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e0:	0711      	lsls	r1, r2, #28
 80069e2:	bf44      	itt	mi
 80069e4:	232b      	movmi	r3, #43	; 0x2b
 80069e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ea:	f89a 3000 	ldrb.w	r3, [sl]
 80069ee:	2b2a      	cmp	r3, #42	; 0x2a
 80069f0:	d015      	beq.n	8006a1e <_svfiprintf_r+0xf6>
 80069f2:	9a07      	ldr	r2, [sp, #28]
 80069f4:	4654      	mov	r4, sl
 80069f6:	2000      	movs	r0, #0
 80069f8:	f04f 0c0a 	mov.w	ip, #10
 80069fc:	4621      	mov	r1, r4
 80069fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a02:	3b30      	subs	r3, #48	; 0x30
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d94e      	bls.n	8006aa6 <_svfiprintf_r+0x17e>
 8006a08:	b1b0      	cbz	r0, 8006a38 <_svfiprintf_r+0x110>
 8006a0a:	9207      	str	r2, [sp, #28]
 8006a0c:	e014      	b.n	8006a38 <_svfiprintf_r+0x110>
 8006a0e:	eba0 0308 	sub.w	r3, r0, r8
 8006a12:	fa09 f303 	lsl.w	r3, r9, r3
 8006a16:	4313      	orrs	r3, r2
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	46a2      	mov	sl, r4
 8006a1c:	e7d2      	b.n	80069c4 <_svfiprintf_r+0x9c>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	1d19      	adds	r1, r3, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	9103      	str	r1, [sp, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bfbb      	ittet	lt
 8006a2a:	425b      	neglt	r3, r3
 8006a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a30:	9307      	strge	r3, [sp, #28]
 8006a32:	9307      	strlt	r3, [sp, #28]
 8006a34:	bfb8      	it	lt
 8006a36:	9204      	strlt	r2, [sp, #16]
 8006a38:	7823      	ldrb	r3, [r4, #0]
 8006a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a3c:	d10c      	bne.n	8006a58 <_svfiprintf_r+0x130>
 8006a3e:	7863      	ldrb	r3, [r4, #1]
 8006a40:	2b2a      	cmp	r3, #42	; 0x2a
 8006a42:	d135      	bne.n	8006ab0 <_svfiprintf_r+0x188>
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	9203      	str	r2, [sp, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfb8      	it	lt
 8006a50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a54:	3402      	adds	r4, #2
 8006a56:	9305      	str	r3, [sp, #20]
 8006a58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b24 <_svfiprintf_r+0x1fc>
 8006a5c:	7821      	ldrb	r1, [r4, #0]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	4650      	mov	r0, sl
 8006a62:	f7f9 fbbd 	bl	80001e0 <memchr>
 8006a66:	b140      	cbz	r0, 8006a7a <_svfiprintf_r+0x152>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	eba0 000a 	sub.w	r0, r0, sl
 8006a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	4303      	orrs	r3, r0
 8006a76:	3401      	adds	r4, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7e:	4826      	ldr	r0, [pc, #152]	; (8006b18 <_svfiprintf_r+0x1f0>)
 8006a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a84:	2206      	movs	r2, #6
 8006a86:	f7f9 fbab 	bl	80001e0 <memchr>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d038      	beq.n	8006b00 <_svfiprintf_r+0x1d8>
 8006a8e:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <_svfiprintf_r+0x1f4>)
 8006a90:	bb1b      	cbnz	r3, 8006ada <_svfiprintf_r+0x1b2>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	3307      	adds	r3, #7
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa0:	4433      	add	r3, r6
 8006aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa4:	e767      	b.n	8006976 <_svfiprintf_r+0x4e>
 8006aa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aaa:	460c      	mov	r4, r1
 8006aac:	2001      	movs	r0, #1
 8006aae:	e7a5      	b.n	80069fc <_svfiprintf_r+0xd4>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	3401      	adds	r4, #1
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f04f 0c0a 	mov.w	ip, #10
 8006abc:	4620      	mov	r0, r4
 8006abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac2:	3a30      	subs	r2, #48	; 0x30
 8006ac4:	2a09      	cmp	r2, #9
 8006ac6:	d903      	bls.n	8006ad0 <_svfiprintf_r+0x1a8>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0c5      	beq.n	8006a58 <_svfiprintf_r+0x130>
 8006acc:	9105      	str	r1, [sp, #20]
 8006ace:	e7c3      	b.n	8006a58 <_svfiprintf_r+0x130>
 8006ad0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e7f0      	b.n	8006abc <_svfiprintf_r+0x194>
 8006ada:	ab03      	add	r3, sp, #12
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <_svfiprintf_r+0x1f8>)
 8006ae2:	a904      	add	r1, sp, #16
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f3af 8000 	nop.w
 8006aea:	1c42      	adds	r2, r0, #1
 8006aec:	4606      	mov	r6, r0
 8006aee:	d1d6      	bne.n	8006a9e <_svfiprintf_r+0x176>
 8006af0:	89ab      	ldrh	r3, [r5, #12]
 8006af2:	065b      	lsls	r3, r3, #25
 8006af4:	f53f af2c 	bmi.w	8006950 <_svfiprintf_r+0x28>
 8006af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006afa:	b01d      	add	sp, #116	; 0x74
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	ab03      	add	r3, sp, #12
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	462a      	mov	r2, r5
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <_svfiprintf_r+0x1f8>)
 8006b08:	a904      	add	r1, sp, #16
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f000 f9d4 	bl	8006eb8 <_printf_i>
 8006b10:	e7eb      	b.n	8006aea <_svfiprintf_r+0x1c2>
 8006b12:	bf00      	nop
 8006b14:	0800777e 	.word	0x0800777e
 8006b18:	08007788 	.word	0x08007788
 8006b1c:	00000000 	.word	0x00000000
 8006b20:	08006871 	.word	0x08006871
 8006b24:	08007784 	.word	0x08007784

08006b28 <__sfputc_r>:
 8006b28:	6893      	ldr	r3, [r2, #8]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	b410      	push	{r4}
 8006b30:	6093      	str	r3, [r2, #8]
 8006b32:	da08      	bge.n	8006b46 <__sfputc_r+0x1e>
 8006b34:	6994      	ldr	r4, [r2, #24]
 8006b36:	42a3      	cmp	r3, r4
 8006b38:	db01      	blt.n	8006b3e <__sfputc_r+0x16>
 8006b3a:	290a      	cmp	r1, #10
 8006b3c:	d103      	bne.n	8006b46 <__sfputc_r+0x1e>
 8006b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b42:	f000 baf1 	b.w	8007128 <__swbuf_r>
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	1c58      	adds	r0, r3, #1
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	7019      	strb	r1, [r3, #0]
 8006b4e:	4608      	mov	r0, r1
 8006b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <__sfputs_r>:
 8006b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b58:	4606      	mov	r6, r0
 8006b5a:	460f      	mov	r7, r1
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	18d5      	adds	r5, r2, r3
 8006b60:	42ac      	cmp	r4, r5
 8006b62:	d101      	bne.n	8006b68 <__sfputs_r+0x12>
 8006b64:	2000      	movs	r0, #0
 8006b66:	e007      	b.n	8006b78 <__sfputs_r+0x22>
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	463a      	mov	r2, r7
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7ff ffda 	bl	8006b28 <__sfputc_r>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d1f3      	bne.n	8006b60 <__sfputs_r+0xa>
 8006b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b7c <_vfiprintf_r>:
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	460d      	mov	r5, r1
 8006b82:	b09d      	sub	sp, #116	; 0x74
 8006b84:	4614      	mov	r4, r2
 8006b86:	4698      	mov	r8, r3
 8006b88:	4606      	mov	r6, r0
 8006b8a:	b118      	cbz	r0, 8006b94 <_vfiprintf_r+0x18>
 8006b8c:	6983      	ldr	r3, [r0, #24]
 8006b8e:	b90b      	cbnz	r3, 8006b94 <_vfiprintf_r+0x18>
 8006b90:	f7ff f9ea 	bl	8005f68 <__sinit>
 8006b94:	4b89      	ldr	r3, [pc, #548]	; (8006dbc <_vfiprintf_r+0x240>)
 8006b96:	429d      	cmp	r5, r3
 8006b98:	d11b      	bne.n	8006bd2 <_vfiprintf_r+0x56>
 8006b9a:	6875      	ldr	r5, [r6, #4]
 8006b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	d405      	bmi.n	8006bae <_vfiprintf_r+0x32>
 8006ba2:	89ab      	ldrh	r3, [r5, #12]
 8006ba4:	059a      	lsls	r2, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_vfiprintf_r+0x32>
 8006ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006baa:	f7ff faa0 	bl	80060ee <__retarget_lock_acquire_recursive>
 8006bae:	89ab      	ldrh	r3, [r5, #12]
 8006bb0:	071b      	lsls	r3, r3, #28
 8006bb2:	d501      	bpl.n	8006bb8 <_vfiprintf_r+0x3c>
 8006bb4:	692b      	ldr	r3, [r5, #16]
 8006bb6:	b9eb      	cbnz	r3, 8006bf4 <_vfiprintf_r+0x78>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f000 fb06 	bl	80071cc <__swsetup_r>
 8006bc0:	b1c0      	cbz	r0, 8006bf4 <_vfiprintf_r+0x78>
 8006bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc4:	07dc      	lsls	r4, r3, #31
 8006bc6:	d50e      	bpl.n	8006be6 <_vfiprintf_r+0x6a>
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bcc:	b01d      	add	sp, #116	; 0x74
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	4b7b      	ldr	r3, [pc, #492]	; (8006dc0 <_vfiprintf_r+0x244>)
 8006bd4:	429d      	cmp	r5, r3
 8006bd6:	d101      	bne.n	8006bdc <_vfiprintf_r+0x60>
 8006bd8:	68b5      	ldr	r5, [r6, #8]
 8006bda:	e7df      	b.n	8006b9c <_vfiprintf_r+0x20>
 8006bdc:	4b79      	ldr	r3, [pc, #484]	; (8006dc4 <_vfiprintf_r+0x248>)
 8006bde:	429d      	cmp	r5, r3
 8006be0:	bf08      	it	eq
 8006be2:	68f5      	ldreq	r5, [r6, #12]
 8006be4:	e7da      	b.n	8006b9c <_vfiprintf_r+0x20>
 8006be6:	89ab      	ldrh	r3, [r5, #12]
 8006be8:	0598      	lsls	r0, r3, #22
 8006bea:	d4ed      	bmi.n	8006bc8 <_vfiprintf_r+0x4c>
 8006bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bee:	f7ff fa7f 	bl	80060f0 <__retarget_lock_release_recursive>
 8006bf2:	e7e9      	b.n	8006bc8 <_vfiprintf_r+0x4c>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c02:	2330      	movs	r3, #48	; 0x30
 8006c04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dc8 <_vfiprintf_r+0x24c>
 8006c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c0c:	f04f 0901 	mov.w	r9, #1
 8006c10:	4623      	mov	r3, r4
 8006c12:	469a      	mov	sl, r3
 8006c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c18:	b10a      	cbz	r2, 8006c1e <_vfiprintf_r+0xa2>
 8006c1a:	2a25      	cmp	r2, #37	; 0x25
 8006c1c:	d1f9      	bne.n	8006c12 <_vfiprintf_r+0x96>
 8006c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c22:	d00b      	beq.n	8006c3c <_vfiprintf_r+0xc0>
 8006c24:	465b      	mov	r3, fp
 8006c26:	4622      	mov	r2, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff ff93 	bl	8006b56 <__sfputs_r>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f000 80aa 	beq.w	8006d8a <_vfiprintf_r+0x20e>
 8006c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c38:	445a      	add	r2, fp
 8006c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80a2 	beq.w	8006d8a <_vfiprintf_r+0x20e>
 8006c46:	2300      	movs	r3, #0
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c50:	f10a 0a01 	add.w	sl, sl, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	9307      	str	r3, [sp, #28]
 8006c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c5e:	4654      	mov	r4, sl
 8006c60:	2205      	movs	r2, #5
 8006c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c66:	4858      	ldr	r0, [pc, #352]	; (8006dc8 <_vfiprintf_r+0x24c>)
 8006c68:	f7f9 faba 	bl	80001e0 <memchr>
 8006c6c:	9a04      	ldr	r2, [sp, #16]
 8006c6e:	b9d8      	cbnz	r0, 8006ca8 <_vfiprintf_r+0x12c>
 8006c70:	06d1      	lsls	r1, r2, #27
 8006c72:	bf44      	itt	mi
 8006c74:	2320      	movmi	r3, #32
 8006c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c7a:	0713      	lsls	r3, r2, #28
 8006c7c:	bf44      	itt	mi
 8006c7e:	232b      	movmi	r3, #43	; 0x2b
 8006c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c84:	f89a 3000 	ldrb.w	r3, [sl]
 8006c88:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8a:	d015      	beq.n	8006cb8 <_vfiprintf_r+0x13c>
 8006c8c:	9a07      	ldr	r2, [sp, #28]
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2000      	movs	r0, #0
 8006c92:	f04f 0c0a 	mov.w	ip, #10
 8006c96:	4621      	mov	r1, r4
 8006c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c9c:	3b30      	subs	r3, #48	; 0x30
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	d94e      	bls.n	8006d40 <_vfiprintf_r+0x1c4>
 8006ca2:	b1b0      	cbz	r0, 8006cd2 <_vfiprintf_r+0x156>
 8006ca4:	9207      	str	r2, [sp, #28]
 8006ca6:	e014      	b.n	8006cd2 <_vfiprintf_r+0x156>
 8006ca8:	eba0 0308 	sub.w	r3, r0, r8
 8006cac:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	46a2      	mov	sl, r4
 8006cb6:	e7d2      	b.n	8006c5e <_vfiprintf_r+0xe2>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	1d19      	adds	r1, r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	9103      	str	r1, [sp, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfbb      	ittet	lt
 8006cc4:	425b      	neglt	r3, r3
 8006cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cca:	9307      	strge	r3, [sp, #28]
 8006ccc:	9307      	strlt	r3, [sp, #28]
 8006cce:	bfb8      	it	lt
 8006cd0:	9204      	strlt	r2, [sp, #16]
 8006cd2:	7823      	ldrb	r3, [r4, #0]
 8006cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006cd6:	d10c      	bne.n	8006cf2 <_vfiprintf_r+0x176>
 8006cd8:	7863      	ldrb	r3, [r4, #1]
 8006cda:	2b2a      	cmp	r3, #42	; 0x2a
 8006cdc:	d135      	bne.n	8006d4a <_vfiprintf_r+0x1ce>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	9203      	str	r2, [sp, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bfb8      	it	lt
 8006cea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cee:	3402      	adds	r4, #2
 8006cf0:	9305      	str	r3, [sp, #20]
 8006cf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006dd8 <_vfiprintf_r+0x25c>
 8006cf6:	7821      	ldrb	r1, [r4, #0]
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa70 	bl	80001e0 <memchr>
 8006d00:	b140      	cbz	r0, 8006d14 <_vfiprintf_r+0x198>
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	eba0 000a 	sub.w	r0, r0, sl
 8006d08:	fa03 f000 	lsl.w	r0, r3, r0
 8006d0c:	9b04      	ldr	r3, [sp, #16]
 8006d0e:	4303      	orrs	r3, r0
 8006d10:	3401      	adds	r4, #1
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d18:	482c      	ldr	r0, [pc, #176]	; (8006dcc <_vfiprintf_r+0x250>)
 8006d1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d1e:	2206      	movs	r2, #6
 8006d20:	f7f9 fa5e 	bl	80001e0 <memchr>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d03f      	beq.n	8006da8 <_vfiprintf_r+0x22c>
 8006d28:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <_vfiprintf_r+0x254>)
 8006d2a:	bb1b      	cbnz	r3, 8006d74 <_vfiprintf_r+0x1f8>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	3307      	adds	r3, #7
 8006d30:	f023 0307 	bic.w	r3, r3, #7
 8006d34:	3308      	adds	r3, #8
 8006d36:	9303      	str	r3, [sp, #12]
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	443b      	add	r3, r7
 8006d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3e:	e767      	b.n	8006c10 <_vfiprintf_r+0x94>
 8006d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d44:	460c      	mov	r4, r1
 8006d46:	2001      	movs	r0, #1
 8006d48:	e7a5      	b.n	8006c96 <_vfiprintf_r+0x11a>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	3401      	adds	r4, #1
 8006d4e:	9305      	str	r3, [sp, #20]
 8006d50:	4619      	mov	r1, r3
 8006d52:	f04f 0c0a 	mov.w	ip, #10
 8006d56:	4620      	mov	r0, r4
 8006d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d5c:	3a30      	subs	r2, #48	; 0x30
 8006d5e:	2a09      	cmp	r2, #9
 8006d60:	d903      	bls.n	8006d6a <_vfiprintf_r+0x1ee>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0c5      	beq.n	8006cf2 <_vfiprintf_r+0x176>
 8006d66:	9105      	str	r1, [sp, #20]
 8006d68:	e7c3      	b.n	8006cf2 <_vfiprintf_r+0x176>
 8006d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d6e:	4604      	mov	r4, r0
 8006d70:	2301      	movs	r3, #1
 8006d72:	e7f0      	b.n	8006d56 <_vfiprintf_r+0x1da>
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4b16      	ldr	r3, [pc, #88]	; (8006dd4 <_vfiprintf_r+0x258>)
 8006d7c:	a904      	add	r1, sp, #16
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f3af 8000 	nop.w
 8006d84:	4607      	mov	r7, r0
 8006d86:	1c78      	adds	r0, r7, #1
 8006d88:	d1d6      	bne.n	8006d38 <_vfiprintf_r+0x1bc>
 8006d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d8c:	07d9      	lsls	r1, r3, #31
 8006d8e:	d405      	bmi.n	8006d9c <_vfiprintf_r+0x220>
 8006d90:	89ab      	ldrh	r3, [r5, #12]
 8006d92:	059a      	lsls	r2, r3, #22
 8006d94:	d402      	bmi.n	8006d9c <_vfiprintf_r+0x220>
 8006d96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d98:	f7ff f9aa 	bl	80060f0 <__retarget_lock_release_recursive>
 8006d9c:	89ab      	ldrh	r3, [r5, #12]
 8006d9e:	065b      	lsls	r3, r3, #25
 8006da0:	f53f af12 	bmi.w	8006bc8 <_vfiprintf_r+0x4c>
 8006da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da6:	e711      	b.n	8006bcc <_vfiprintf_r+0x50>
 8006da8:	ab03      	add	r3, sp, #12
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <_vfiprintf_r+0x258>)
 8006db0:	a904      	add	r1, sp, #16
 8006db2:	4630      	mov	r0, r6
 8006db4:	f000 f880 	bl	8006eb8 <_printf_i>
 8006db8:	e7e4      	b.n	8006d84 <_vfiprintf_r+0x208>
 8006dba:	bf00      	nop
 8006dbc:	0800768c 	.word	0x0800768c
 8006dc0:	080076ac 	.word	0x080076ac
 8006dc4:	0800766c 	.word	0x0800766c
 8006dc8:	0800777e 	.word	0x0800777e
 8006dcc:	08007788 	.word	0x08007788
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	08006b57 	.word	0x08006b57
 8006dd8:	08007784 	.word	0x08007784

08006ddc <_printf_common>:
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	4616      	mov	r6, r2
 8006de2:	4699      	mov	r9, r3
 8006de4:	688a      	ldr	r2, [r1, #8]
 8006de6:	690b      	ldr	r3, [r1, #16]
 8006de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	bfb8      	it	lt
 8006df0:	4613      	movlt	r3, r2
 8006df2:	6033      	str	r3, [r6, #0]
 8006df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006df8:	4607      	mov	r7, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	b10a      	cbz	r2, 8006e02 <_printf_common+0x26>
 8006dfe:	3301      	adds	r3, #1
 8006e00:	6033      	str	r3, [r6, #0]
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	0699      	lsls	r1, r3, #26
 8006e06:	bf42      	ittt	mi
 8006e08:	6833      	ldrmi	r3, [r6, #0]
 8006e0a:	3302      	addmi	r3, #2
 8006e0c:	6033      	strmi	r3, [r6, #0]
 8006e0e:	6825      	ldr	r5, [r4, #0]
 8006e10:	f015 0506 	ands.w	r5, r5, #6
 8006e14:	d106      	bne.n	8006e24 <_printf_common+0x48>
 8006e16:	f104 0a19 	add.w	sl, r4, #25
 8006e1a:	68e3      	ldr	r3, [r4, #12]
 8006e1c:	6832      	ldr	r2, [r6, #0]
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	42ab      	cmp	r3, r5
 8006e22:	dc26      	bgt.n	8006e72 <_printf_common+0x96>
 8006e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e28:	1e13      	subs	r3, r2, #0
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	bf18      	it	ne
 8006e2e:	2301      	movne	r3, #1
 8006e30:	0692      	lsls	r2, r2, #26
 8006e32:	d42b      	bmi.n	8006e8c <_printf_common+0xb0>
 8006e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e38:	4649      	mov	r1, r9
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	47c0      	blx	r8
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d01e      	beq.n	8006e80 <_printf_common+0xa4>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	68e5      	ldr	r5, [r4, #12]
 8006e46:	6832      	ldr	r2, [r6, #0]
 8006e48:	f003 0306 	and.w	r3, r3, #6
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	bf08      	it	eq
 8006e50:	1aad      	subeq	r5, r5, r2
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	bf0c      	ite	eq
 8006e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e5c:	2500      	movne	r5, #0
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	bfc4      	itt	gt
 8006e62:	1a9b      	subgt	r3, r3, r2
 8006e64:	18ed      	addgt	r5, r5, r3
 8006e66:	2600      	movs	r6, #0
 8006e68:	341a      	adds	r4, #26
 8006e6a:	42b5      	cmp	r5, r6
 8006e6c:	d11a      	bne.n	8006ea4 <_printf_common+0xc8>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e008      	b.n	8006e84 <_printf_common+0xa8>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4652      	mov	r2, sl
 8006e76:	4649      	mov	r1, r9
 8006e78:	4638      	mov	r0, r7
 8006e7a:	47c0      	blx	r8
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d103      	bne.n	8006e88 <_printf_common+0xac>
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e88:	3501      	adds	r5, #1
 8006e8a:	e7c6      	b.n	8006e1a <_printf_common+0x3e>
 8006e8c:	18e1      	adds	r1, r4, r3
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	2030      	movs	r0, #48	; 0x30
 8006e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e96:	4422      	add	r2, r4
 8006e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	e7c7      	b.n	8006e34 <_printf_common+0x58>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4638      	mov	r0, r7
 8006eac:	47c0      	blx	r8
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d0e6      	beq.n	8006e80 <_printf_common+0xa4>
 8006eb2:	3601      	adds	r6, #1
 8006eb4:	e7d9      	b.n	8006e6a <_printf_common+0x8e>
	...

08006eb8 <_printf_i>:
 8006eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	7e0f      	ldrb	r7, [r1, #24]
 8006ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ec0:	2f78      	cmp	r7, #120	; 0x78
 8006ec2:	4691      	mov	r9, r2
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ece:	d807      	bhi.n	8006ee0 <_printf_i+0x28>
 8006ed0:	2f62      	cmp	r7, #98	; 0x62
 8006ed2:	d80a      	bhi.n	8006eea <_printf_i+0x32>
 8006ed4:	2f00      	cmp	r7, #0
 8006ed6:	f000 80d8 	beq.w	800708a <_printf_i+0x1d2>
 8006eda:	2f58      	cmp	r7, #88	; 0x58
 8006edc:	f000 80a3 	beq.w	8007026 <_printf_i+0x16e>
 8006ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ee8:	e03a      	b.n	8006f60 <_printf_i+0xa8>
 8006eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eee:	2b15      	cmp	r3, #21
 8006ef0:	d8f6      	bhi.n	8006ee0 <_printf_i+0x28>
 8006ef2:	a101      	add	r1, pc, #4	; (adr r1, 8006ef8 <_printf_i+0x40>)
 8006ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006ee1 	.word	0x08006ee1
 8006f04:	08006ee1 	.word	0x08006ee1
 8006f08:	08006ee1 	.word	0x08006ee1
 8006f0c:	08006ee1 	.word	0x08006ee1
 8006f10:	08006f65 	.word	0x08006f65
 8006f14:	08006ee1 	.word	0x08006ee1
 8006f18:	08006ee1 	.word	0x08006ee1
 8006f1c:	08006ee1 	.word	0x08006ee1
 8006f20:	08006ee1 	.word	0x08006ee1
 8006f24:	08007071 	.word	0x08007071
 8006f28:	08006f95 	.word	0x08006f95
 8006f2c:	08007053 	.word	0x08007053
 8006f30:	08006ee1 	.word	0x08006ee1
 8006f34:	08006ee1 	.word	0x08006ee1
 8006f38:	08007093 	.word	0x08007093
 8006f3c:	08006ee1 	.word	0x08006ee1
 8006f40:	08006f95 	.word	0x08006f95
 8006f44:	08006ee1 	.word	0x08006ee1
 8006f48:	08006ee1 	.word	0x08006ee1
 8006f4c:	0800705b 	.word	0x0800705b
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	602a      	str	r2, [r5, #0]
 8006f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0a3      	b.n	80070ac <_printf_i+0x1f4>
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	6829      	ldr	r1, [r5, #0]
 8006f68:	0606      	lsls	r6, r0, #24
 8006f6a:	f101 0304 	add.w	r3, r1, #4
 8006f6e:	d50a      	bpl.n	8006f86 <_printf_i+0xce>
 8006f70:	680e      	ldr	r6, [r1, #0]
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	da03      	bge.n	8006f80 <_printf_i+0xc8>
 8006f78:	232d      	movs	r3, #45	; 0x2d
 8006f7a:	4276      	negs	r6, r6
 8006f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f80:	485e      	ldr	r0, [pc, #376]	; (80070fc <_printf_i+0x244>)
 8006f82:	230a      	movs	r3, #10
 8006f84:	e019      	b.n	8006fba <_printf_i+0x102>
 8006f86:	680e      	ldr	r6, [r1, #0]
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f8e:	bf18      	it	ne
 8006f90:	b236      	sxthne	r6, r6
 8006f92:	e7ef      	b.n	8006f74 <_printf_i+0xbc>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	6820      	ldr	r0, [r4, #0]
 8006f98:	1d19      	adds	r1, r3, #4
 8006f9a:	6029      	str	r1, [r5, #0]
 8006f9c:	0601      	lsls	r1, r0, #24
 8006f9e:	d501      	bpl.n	8006fa4 <_printf_i+0xec>
 8006fa0:	681e      	ldr	r6, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <_printf_i+0xf2>
 8006fa4:	0646      	lsls	r6, r0, #25
 8006fa6:	d5fb      	bpl.n	8006fa0 <_printf_i+0xe8>
 8006fa8:	881e      	ldrh	r6, [r3, #0]
 8006faa:	4854      	ldr	r0, [pc, #336]	; (80070fc <_printf_i+0x244>)
 8006fac:	2f6f      	cmp	r7, #111	; 0x6f
 8006fae:	bf0c      	ite	eq
 8006fb0:	2308      	moveq	r3, #8
 8006fb2:	230a      	movne	r3, #10
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fba:	6865      	ldr	r5, [r4, #4]
 8006fbc:	60a5      	str	r5, [r4, #8]
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	bfa2      	ittt	ge
 8006fc2:	6821      	ldrge	r1, [r4, #0]
 8006fc4:	f021 0104 	bicge.w	r1, r1, #4
 8006fc8:	6021      	strge	r1, [r4, #0]
 8006fca:	b90e      	cbnz	r6, 8006fd0 <_printf_i+0x118>
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	d04d      	beq.n	800706c <_printf_i+0x1b4>
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fd6:	fb03 6711 	mls	r7, r3, r1, r6
 8006fda:	5dc7      	ldrb	r7, [r0, r7]
 8006fdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	42bb      	cmp	r3, r7
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	d9f4      	bls.n	8006fd2 <_printf_i+0x11a>
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d10b      	bne.n	8007004 <_printf_i+0x14c>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	07de      	lsls	r6, r3, #31
 8006ff0:	d508      	bpl.n	8007004 <_printf_i+0x14c>
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	6861      	ldr	r1, [r4, #4]
 8006ff6:	4299      	cmp	r1, r3
 8006ff8:	bfde      	ittt	le
 8006ffa:	2330      	movle	r3, #48	; 0x30
 8006ffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007000:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007004:	1b52      	subs	r2, r2, r5
 8007006:	6122      	str	r2, [r4, #16]
 8007008:	f8cd a000 	str.w	sl, [sp]
 800700c:	464b      	mov	r3, r9
 800700e:	aa03      	add	r2, sp, #12
 8007010:	4621      	mov	r1, r4
 8007012:	4640      	mov	r0, r8
 8007014:	f7ff fee2 	bl	8006ddc <_printf_common>
 8007018:	3001      	adds	r0, #1
 800701a:	d14c      	bne.n	80070b6 <_printf_i+0x1fe>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007020:	b004      	add	sp, #16
 8007022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007026:	4835      	ldr	r0, [pc, #212]	; (80070fc <_printf_i+0x244>)
 8007028:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800702c:	6829      	ldr	r1, [r5, #0]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f851 6b04 	ldr.w	r6, [r1], #4
 8007034:	6029      	str	r1, [r5, #0]
 8007036:	061d      	lsls	r5, r3, #24
 8007038:	d514      	bpl.n	8007064 <_printf_i+0x1ac>
 800703a:	07df      	lsls	r7, r3, #31
 800703c:	bf44      	itt	mi
 800703e:	f043 0320 	orrmi.w	r3, r3, #32
 8007042:	6023      	strmi	r3, [r4, #0]
 8007044:	b91e      	cbnz	r6, 800704e <_printf_i+0x196>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f023 0320 	bic.w	r3, r3, #32
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	2310      	movs	r3, #16
 8007050:	e7b0      	b.n	8006fb4 <_printf_i+0xfc>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f043 0320 	orr.w	r3, r3, #32
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	2378      	movs	r3, #120	; 0x78
 800705c:	4828      	ldr	r0, [pc, #160]	; (8007100 <_printf_i+0x248>)
 800705e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007062:	e7e3      	b.n	800702c <_printf_i+0x174>
 8007064:	0659      	lsls	r1, r3, #25
 8007066:	bf48      	it	mi
 8007068:	b2b6      	uxthmi	r6, r6
 800706a:	e7e6      	b.n	800703a <_printf_i+0x182>
 800706c:	4615      	mov	r5, r2
 800706e:	e7bb      	b.n	8006fe8 <_printf_i+0x130>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	6826      	ldr	r6, [r4, #0]
 8007074:	6961      	ldr	r1, [r4, #20]
 8007076:	1d18      	adds	r0, r3, #4
 8007078:	6028      	str	r0, [r5, #0]
 800707a:	0635      	lsls	r5, r6, #24
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	d501      	bpl.n	8007084 <_printf_i+0x1cc>
 8007080:	6019      	str	r1, [r3, #0]
 8007082:	e002      	b.n	800708a <_printf_i+0x1d2>
 8007084:	0670      	lsls	r0, r6, #25
 8007086:	d5fb      	bpl.n	8007080 <_printf_i+0x1c8>
 8007088:	8019      	strh	r1, [r3, #0]
 800708a:	2300      	movs	r3, #0
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	4615      	mov	r5, r2
 8007090:	e7ba      	b.n	8007008 <_printf_i+0x150>
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	1d1a      	adds	r2, r3, #4
 8007096:	602a      	str	r2, [r5, #0]
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	2100      	movs	r1, #0
 800709e:	4628      	mov	r0, r5
 80070a0:	f7f9 f89e 	bl	80001e0 <memchr>
 80070a4:	b108      	cbz	r0, 80070aa <_printf_i+0x1f2>
 80070a6:	1b40      	subs	r0, r0, r5
 80070a8:	6060      	str	r0, [r4, #4]
 80070aa:	6863      	ldr	r3, [r4, #4]
 80070ac:	6123      	str	r3, [r4, #16]
 80070ae:	2300      	movs	r3, #0
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b4:	e7a8      	b.n	8007008 <_printf_i+0x150>
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	462a      	mov	r2, r5
 80070ba:	4649      	mov	r1, r9
 80070bc:	4640      	mov	r0, r8
 80070be:	47d0      	blx	sl
 80070c0:	3001      	adds	r0, #1
 80070c2:	d0ab      	beq.n	800701c <_printf_i+0x164>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	079b      	lsls	r3, r3, #30
 80070c8:	d413      	bmi.n	80070f2 <_printf_i+0x23a>
 80070ca:	68e0      	ldr	r0, [r4, #12]
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	4298      	cmp	r0, r3
 80070d0:	bfb8      	it	lt
 80070d2:	4618      	movlt	r0, r3
 80070d4:	e7a4      	b.n	8007020 <_printf_i+0x168>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4632      	mov	r2, r6
 80070da:	4649      	mov	r1, r9
 80070dc:	4640      	mov	r0, r8
 80070de:	47d0      	blx	sl
 80070e0:	3001      	adds	r0, #1
 80070e2:	d09b      	beq.n	800701c <_printf_i+0x164>
 80070e4:	3501      	adds	r5, #1
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	9903      	ldr	r1, [sp, #12]
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dcf2      	bgt.n	80070d6 <_printf_i+0x21e>
 80070f0:	e7eb      	b.n	80070ca <_printf_i+0x212>
 80070f2:	2500      	movs	r5, #0
 80070f4:	f104 0619 	add.w	r6, r4, #25
 80070f8:	e7f5      	b.n	80070e6 <_printf_i+0x22e>
 80070fa:	bf00      	nop
 80070fc:	0800778f 	.word	0x0800778f
 8007100:	080077a0 	.word	0x080077a0

08007104 <_read_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	; (8007124 <_read_r+0x20>)
 8007108:	4604      	mov	r4, r0
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
 800710e:	2200      	movs	r2, #0
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7f9 ff54 	bl	8000fc0 <_read>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_read_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_read_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	20004b80 	.word	0x20004b80

08007128 <__swbuf_r>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	460e      	mov	r6, r1
 800712c:	4614      	mov	r4, r2
 800712e:	4605      	mov	r5, r0
 8007130:	b118      	cbz	r0, 800713a <__swbuf_r+0x12>
 8007132:	6983      	ldr	r3, [r0, #24]
 8007134:	b90b      	cbnz	r3, 800713a <__swbuf_r+0x12>
 8007136:	f7fe ff17 	bl	8005f68 <__sinit>
 800713a:	4b21      	ldr	r3, [pc, #132]	; (80071c0 <__swbuf_r+0x98>)
 800713c:	429c      	cmp	r4, r3
 800713e:	d12b      	bne.n	8007198 <__swbuf_r+0x70>
 8007140:	686c      	ldr	r4, [r5, #4]
 8007142:	69a3      	ldr	r3, [r4, #24]
 8007144:	60a3      	str	r3, [r4, #8]
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	071a      	lsls	r2, r3, #28
 800714a:	d52f      	bpl.n	80071ac <__swbuf_r+0x84>
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	b36b      	cbz	r3, 80071ac <__swbuf_r+0x84>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	6820      	ldr	r0, [r4, #0]
 8007154:	1ac0      	subs	r0, r0, r3
 8007156:	6963      	ldr	r3, [r4, #20]
 8007158:	b2f6      	uxtb	r6, r6
 800715a:	4283      	cmp	r3, r0
 800715c:	4637      	mov	r7, r6
 800715e:	dc04      	bgt.n	800716a <__swbuf_r+0x42>
 8007160:	4621      	mov	r1, r4
 8007162:	4628      	mov	r0, r5
 8007164:	f7ff fab2 	bl	80066cc <_fflush_r>
 8007168:	bb30      	cbnz	r0, 80071b8 <__swbuf_r+0x90>
 800716a:	68a3      	ldr	r3, [r4, #8]
 800716c:	3b01      	subs	r3, #1
 800716e:	60a3      	str	r3, [r4, #8]
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	6022      	str	r2, [r4, #0]
 8007176:	701e      	strb	r6, [r3, #0]
 8007178:	6963      	ldr	r3, [r4, #20]
 800717a:	3001      	adds	r0, #1
 800717c:	4283      	cmp	r3, r0
 800717e:	d004      	beq.n	800718a <__swbuf_r+0x62>
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	07db      	lsls	r3, r3, #31
 8007184:	d506      	bpl.n	8007194 <__swbuf_r+0x6c>
 8007186:	2e0a      	cmp	r6, #10
 8007188:	d104      	bne.n	8007194 <__swbuf_r+0x6c>
 800718a:	4621      	mov	r1, r4
 800718c:	4628      	mov	r0, r5
 800718e:	f7ff fa9d 	bl	80066cc <_fflush_r>
 8007192:	b988      	cbnz	r0, 80071b8 <__swbuf_r+0x90>
 8007194:	4638      	mov	r0, r7
 8007196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <__swbuf_r+0x9c>)
 800719a:	429c      	cmp	r4, r3
 800719c:	d101      	bne.n	80071a2 <__swbuf_r+0x7a>
 800719e:	68ac      	ldr	r4, [r5, #8]
 80071a0:	e7cf      	b.n	8007142 <__swbuf_r+0x1a>
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <__swbuf_r+0xa0>)
 80071a4:	429c      	cmp	r4, r3
 80071a6:	bf08      	it	eq
 80071a8:	68ec      	ldreq	r4, [r5, #12]
 80071aa:	e7ca      	b.n	8007142 <__swbuf_r+0x1a>
 80071ac:	4621      	mov	r1, r4
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f80c 	bl	80071cc <__swsetup_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d0cb      	beq.n	8007150 <__swbuf_r+0x28>
 80071b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071bc:	e7ea      	b.n	8007194 <__swbuf_r+0x6c>
 80071be:	bf00      	nop
 80071c0:	0800768c 	.word	0x0800768c
 80071c4:	080076ac 	.word	0x080076ac
 80071c8:	0800766c 	.word	0x0800766c

080071cc <__swsetup_r>:
 80071cc:	4b32      	ldr	r3, [pc, #200]	; (8007298 <__swsetup_r+0xcc>)
 80071ce:	b570      	push	{r4, r5, r6, lr}
 80071d0:	681d      	ldr	r5, [r3, #0]
 80071d2:	4606      	mov	r6, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	b125      	cbz	r5, 80071e2 <__swsetup_r+0x16>
 80071d8:	69ab      	ldr	r3, [r5, #24]
 80071da:	b913      	cbnz	r3, 80071e2 <__swsetup_r+0x16>
 80071dc:	4628      	mov	r0, r5
 80071de:	f7fe fec3 	bl	8005f68 <__sinit>
 80071e2:	4b2e      	ldr	r3, [pc, #184]	; (800729c <__swsetup_r+0xd0>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	d10f      	bne.n	8007208 <__swsetup_r+0x3c>
 80071e8:	686c      	ldr	r4, [r5, #4]
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071f0:	0719      	lsls	r1, r3, #28
 80071f2:	d42c      	bmi.n	800724e <__swsetup_r+0x82>
 80071f4:	06dd      	lsls	r5, r3, #27
 80071f6:	d411      	bmi.n	800721c <__swsetup_r+0x50>
 80071f8:	2309      	movs	r3, #9
 80071fa:	6033      	str	r3, [r6, #0]
 80071fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007206:	e03e      	b.n	8007286 <__swsetup_r+0xba>
 8007208:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <__swsetup_r+0xd4>)
 800720a:	429c      	cmp	r4, r3
 800720c:	d101      	bne.n	8007212 <__swsetup_r+0x46>
 800720e:	68ac      	ldr	r4, [r5, #8]
 8007210:	e7eb      	b.n	80071ea <__swsetup_r+0x1e>
 8007212:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <__swsetup_r+0xd8>)
 8007214:	429c      	cmp	r4, r3
 8007216:	bf08      	it	eq
 8007218:	68ec      	ldreq	r4, [r5, #12]
 800721a:	e7e6      	b.n	80071ea <__swsetup_r+0x1e>
 800721c:	0758      	lsls	r0, r3, #29
 800721e:	d512      	bpl.n	8007246 <__swsetup_r+0x7a>
 8007220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007222:	b141      	cbz	r1, 8007236 <__swsetup_r+0x6a>
 8007224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007228:	4299      	cmp	r1, r3
 800722a:	d002      	beq.n	8007232 <__swsetup_r+0x66>
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff fad3 	bl	80067d8 <_free_r>
 8007232:	2300      	movs	r3, #0
 8007234:	6363      	str	r3, [r4, #52]	; 0x34
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	2300      	movs	r3, #0
 8007240:	6063      	str	r3, [r4, #4]
 8007242:	6923      	ldr	r3, [r4, #16]
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f043 0308 	orr.w	r3, r3, #8
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	b94b      	cbnz	r3, 8007266 <__swsetup_r+0x9a>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800725c:	d003      	beq.n	8007266 <__swsetup_r+0x9a>
 800725e:	4621      	mov	r1, r4
 8007260:	4630      	mov	r0, r6
 8007262:	f000 f84d 	bl	8007300 <__smakebuf_r>
 8007266:	89a0      	ldrh	r0, [r4, #12]
 8007268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800726c:	f010 0301 	ands.w	r3, r0, #1
 8007270:	d00a      	beq.n	8007288 <__swsetup_r+0xbc>
 8007272:	2300      	movs	r3, #0
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	6963      	ldr	r3, [r4, #20]
 8007278:	425b      	negs	r3, r3
 800727a:	61a3      	str	r3, [r4, #24]
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	b943      	cbnz	r3, 8007292 <__swsetup_r+0xc6>
 8007280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007284:	d1ba      	bne.n	80071fc <__swsetup_r+0x30>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	0781      	lsls	r1, r0, #30
 800728a:	bf58      	it	pl
 800728c:	6963      	ldrpl	r3, [r4, #20]
 800728e:	60a3      	str	r3, [r4, #8]
 8007290:	e7f4      	b.n	800727c <__swsetup_r+0xb0>
 8007292:	2000      	movs	r0, #0
 8007294:	e7f7      	b.n	8007286 <__swsetup_r+0xba>
 8007296:	bf00      	nop
 8007298:	20000010 	.word	0x20000010
 800729c:	0800768c 	.word	0x0800768c
 80072a0:	080076ac 	.word	0x080076ac
 80072a4:	0800766c 	.word	0x0800766c

080072a8 <abort>:
 80072a8:	b508      	push	{r3, lr}
 80072aa:	2006      	movs	r0, #6
 80072ac:	f000 f8da 	bl	8007464 <raise>
 80072b0:	2001      	movs	r0, #1
 80072b2:	f7f9 fe7b 	bl	8000fac <_exit>

080072b6 <__swhatbuf_r>:
 80072b6:	b570      	push	{r4, r5, r6, lr}
 80072b8:	460e      	mov	r6, r1
 80072ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072be:	2900      	cmp	r1, #0
 80072c0:	b096      	sub	sp, #88	; 0x58
 80072c2:	4614      	mov	r4, r2
 80072c4:	461d      	mov	r5, r3
 80072c6:	da08      	bge.n	80072da <__swhatbuf_r+0x24>
 80072c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	602a      	str	r2, [r5, #0]
 80072d0:	061a      	lsls	r2, r3, #24
 80072d2:	d410      	bmi.n	80072f6 <__swhatbuf_r+0x40>
 80072d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d8:	e00e      	b.n	80072f8 <__swhatbuf_r+0x42>
 80072da:	466a      	mov	r2, sp
 80072dc:	f000 f8de 	bl	800749c <_fstat_r>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	dbf1      	blt.n	80072c8 <__swhatbuf_r+0x12>
 80072e4:	9a01      	ldr	r2, [sp, #4]
 80072e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072ee:	425a      	negs	r2, r3
 80072f0:	415a      	adcs	r2, r3
 80072f2:	602a      	str	r2, [r5, #0]
 80072f4:	e7ee      	b.n	80072d4 <__swhatbuf_r+0x1e>
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	2000      	movs	r0, #0
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	b016      	add	sp, #88	; 0x58
 80072fe:	bd70      	pop	{r4, r5, r6, pc}

08007300 <__smakebuf_r>:
 8007300:	898b      	ldrh	r3, [r1, #12]
 8007302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007304:	079d      	lsls	r5, r3, #30
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	d507      	bpl.n	800731c <__smakebuf_r+0x1c>
 800730c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	6123      	str	r3, [r4, #16]
 8007314:	2301      	movs	r3, #1
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	b002      	add	sp, #8
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	ab01      	add	r3, sp, #4
 800731e:	466a      	mov	r2, sp
 8007320:	f7ff ffc9 	bl	80072b6 <__swhatbuf_r>
 8007324:	9900      	ldr	r1, [sp, #0]
 8007326:	4605      	mov	r5, r0
 8007328:	4630      	mov	r0, r6
 800732a:	f7fe ff19 	bl	8006160 <_malloc_r>
 800732e:	b948      	cbnz	r0, 8007344 <__smakebuf_r+0x44>
 8007330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007334:	059a      	lsls	r2, r3, #22
 8007336:	d4ef      	bmi.n	8007318 <__smakebuf_r+0x18>
 8007338:	f023 0303 	bic.w	r3, r3, #3
 800733c:	f043 0302 	orr.w	r3, r3, #2
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e7e3      	b.n	800730c <__smakebuf_r+0xc>
 8007344:	4b0d      	ldr	r3, [pc, #52]	; (800737c <__smakebuf_r+0x7c>)
 8007346:	62b3      	str	r3, [r6, #40]	; 0x28
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	6020      	str	r0, [r4, #0]
 800734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007350:	81a3      	strh	r3, [r4, #12]
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	6163      	str	r3, [r4, #20]
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	6120      	str	r0, [r4, #16]
 800735a:	b15b      	cbz	r3, 8007374 <__smakebuf_r+0x74>
 800735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007360:	4630      	mov	r0, r6
 8007362:	f000 f8ad 	bl	80074c0 <_isatty_r>
 8007366:	b128      	cbz	r0, 8007374 <__smakebuf_r+0x74>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	89a0      	ldrh	r0, [r4, #12]
 8007376:	4305      	orrs	r5, r0
 8007378:	81a5      	strh	r5, [r4, #12]
 800737a:	e7cd      	b.n	8007318 <__smakebuf_r+0x18>
 800737c:	08005f01 	.word	0x08005f01

08007380 <memmove>:
 8007380:	4288      	cmp	r0, r1
 8007382:	b510      	push	{r4, lr}
 8007384:	eb01 0402 	add.w	r4, r1, r2
 8007388:	d902      	bls.n	8007390 <memmove+0x10>
 800738a:	4284      	cmp	r4, r0
 800738c:	4623      	mov	r3, r4
 800738e:	d807      	bhi.n	80073a0 <memmove+0x20>
 8007390:	1e43      	subs	r3, r0, #1
 8007392:	42a1      	cmp	r1, r4
 8007394:	d008      	beq.n	80073a8 <memmove+0x28>
 8007396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800739e:	e7f8      	b.n	8007392 <memmove+0x12>
 80073a0:	4402      	add	r2, r0
 80073a2:	4601      	mov	r1, r0
 80073a4:	428a      	cmp	r2, r1
 80073a6:	d100      	bne.n	80073aa <memmove+0x2a>
 80073a8:	bd10      	pop	{r4, pc}
 80073aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073b2:	e7f7      	b.n	80073a4 <memmove+0x24>

080073b4 <_realloc_r>:
 80073b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b8:	4680      	mov	r8, r0
 80073ba:	4614      	mov	r4, r2
 80073bc:	460e      	mov	r6, r1
 80073be:	b921      	cbnz	r1, 80073ca <_realloc_r+0x16>
 80073c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	4611      	mov	r1, r2
 80073c6:	f7fe becb 	b.w	8006160 <_malloc_r>
 80073ca:	b92a      	cbnz	r2, 80073d8 <_realloc_r+0x24>
 80073cc:	f7ff fa04 	bl	80067d8 <_free_r>
 80073d0:	4625      	mov	r5, r4
 80073d2:	4628      	mov	r0, r5
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	f000 f882 	bl	80074e0 <_malloc_usable_size_r>
 80073dc:	4284      	cmp	r4, r0
 80073de:	4607      	mov	r7, r0
 80073e0:	d802      	bhi.n	80073e8 <_realloc_r+0x34>
 80073e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073e6:	d812      	bhi.n	800740e <_realloc_r+0x5a>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4640      	mov	r0, r8
 80073ec:	f7fe feb8 	bl	8006160 <_malloc_r>
 80073f0:	4605      	mov	r5, r0
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0ed      	beq.n	80073d2 <_realloc_r+0x1e>
 80073f6:	42bc      	cmp	r4, r7
 80073f8:	4622      	mov	r2, r4
 80073fa:	4631      	mov	r1, r6
 80073fc:	bf28      	it	cs
 80073fe:	463a      	movcs	r2, r7
 8007400:	f7fe fe77 	bl	80060f2 <memcpy>
 8007404:	4631      	mov	r1, r6
 8007406:	4640      	mov	r0, r8
 8007408:	f7ff f9e6 	bl	80067d8 <_free_r>
 800740c:	e7e1      	b.n	80073d2 <_realloc_r+0x1e>
 800740e:	4635      	mov	r5, r6
 8007410:	e7df      	b.n	80073d2 <_realloc_r+0x1e>

08007412 <_raise_r>:
 8007412:	291f      	cmp	r1, #31
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	d904      	bls.n	8007426 <_raise_r+0x14>
 800741c:	2316      	movs	r3, #22
 800741e:	6003      	str	r3, [r0, #0]
 8007420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007424:	bd38      	pop	{r3, r4, r5, pc}
 8007426:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007428:	b112      	cbz	r2, 8007430 <_raise_r+0x1e>
 800742a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800742e:	b94b      	cbnz	r3, 8007444 <_raise_r+0x32>
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f831 	bl	8007498 <_getpid_r>
 8007436:	462a      	mov	r2, r5
 8007438:	4601      	mov	r1, r0
 800743a:	4620      	mov	r0, r4
 800743c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007440:	f000 b818 	b.w	8007474 <_kill_r>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d00a      	beq.n	800745e <_raise_r+0x4c>
 8007448:	1c59      	adds	r1, r3, #1
 800744a:	d103      	bne.n	8007454 <_raise_r+0x42>
 800744c:	2316      	movs	r3, #22
 800744e:	6003      	str	r3, [r0, #0]
 8007450:	2001      	movs	r0, #1
 8007452:	e7e7      	b.n	8007424 <_raise_r+0x12>
 8007454:	2400      	movs	r4, #0
 8007456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800745a:	4628      	mov	r0, r5
 800745c:	4798      	blx	r3
 800745e:	2000      	movs	r0, #0
 8007460:	e7e0      	b.n	8007424 <_raise_r+0x12>
	...

08007464 <raise>:
 8007464:	4b02      	ldr	r3, [pc, #8]	; (8007470 <raise+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f7ff bfd2 	b.w	8007412 <_raise_r>
 800746e:	bf00      	nop
 8007470:	20000010 	.word	0x20000010

08007474 <_kill_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	; (8007494 <_kill_r+0x20>)
 8007478:	2300      	movs	r3, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	f7f9 fd83 	bl	8000f8c <_kill>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d102      	bne.n	8007490 <_kill_r+0x1c>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	b103      	cbz	r3, 8007490 <_kill_r+0x1c>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	20004b80 	.word	0x20004b80

08007498 <_getpid_r>:
 8007498:	f7f9 bd70 	b.w	8000f7c <_getpid>

0800749c <_fstat_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d07      	ldr	r5, [pc, #28]	; (80074bc <_fstat_r+0x20>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	602b      	str	r3, [r5, #0]
 80074aa:	f7f9 fdce 	bl	800104a <_fstat>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d102      	bne.n	80074b8 <_fstat_r+0x1c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	b103      	cbz	r3, 80074b8 <_fstat_r+0x1c>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	bf00      	nop
 80074bc:	20004b80 	.word	0x20004b80

080074c0 <_isatty_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d06      	ldr	r5, [pc, #24]	; (80074dc <_isatty_r+0x1c>)
 80074c4:	2300      	movs	r3, #0
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	602b      	str	r3, [r5, #0]
 80074cc:	f7f9 fdcd 	bl	800106a <_isatty>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_isatty_r+0x1a>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_isatty_r+0x1a>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20004b80 	.word	0x20004b80

080074e0 <_malloc_usable_size_r>:
 80074e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e4:	1f18      	subs	r0, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfbc      	itt	lt
 80074ea:	580b      	ldrlt	r3, [r1, r0]
 80074ec:	18c0      	addlt	r0, r0, r3
 80074ee:	4770      	bx	lr

080074f0 <_gettimeofday>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	; (80074fc <_gettimeofday+0xc>)
 80074f2:	2258      	movs	r2, #88	; 0x58
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074fa:	4770      	bx	lr
 80074fc:	20004b80 	.word	0x20004b80

08007500 <_init>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr

0800750c <_fini>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	bf00      	nop
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr
